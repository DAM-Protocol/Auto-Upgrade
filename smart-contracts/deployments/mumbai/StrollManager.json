{
  "address": "0x896d448119F6901d27845f77083Dfe5456C05099",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_icfa",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_minLower",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_minUpper",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "limitGiven",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "minLimit",
          "type": "uint64"
        }
      ],
      "name": "InsufficientLimits",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "expirationTimeGiven",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "timeNow",
          "type": "uint256"
        }
      ],
      "name": "InvalidExpirationTime",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "InvalidStrategy",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "index",
          "type": "bytes32"
        }
      ],
      "name": "TopUpNotRequired",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "expectedCaller",
          "type": "address"
        }
      ],
      "name": "UnauthorizedCaller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superToken",
          "type": "address"
        }
      ],
      "name": "UnsupportedSuperToken",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "lowerLimit",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "upperLimit",
          "type": "uint64"
        }
      ],
      "name": "WrongLimits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "AddedApprovedStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "lowerLimit",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "upperLimit",
          "type": "uint64"
        }
      ],
      "name": "LimitsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topUpAmount",
          "type": "uint256"
        }
      ],
      "name": "PerformedTopUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "RemovedApprovedStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "superToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lowerLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upperLimit",
          "type": "uint256"
        }
      ],
      "name": "TopUpCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "superToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityToken",
          "type": "address"
        }
      ],
      "name": "TopUpDeleted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CFA_V1",
      "outputs": [
        {
          "internalType": "contract IConstantFlowAgreementV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "addApprovedStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedStrategies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken",
          "type": "address"
        }
      ],
      "name": "checkTopUp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_index",
          "type": "bytes32"
        }
      ],
      "name": "checkTopUpByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_expiry",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_lowerLimit",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_upperLimit",
          "type": "uint64"
        }
      ],
      "name": "createTopUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_indices",
          "type": "bytes32[]"
        }
      ],
      "name": "deleteBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken",
          "type": "address"
        }
      ],
      "name": "deleteTopUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_index",
          "type": "bytes32"
        }
      ],
      "name": "deleteTopUpByIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken",
          "type": "address"
        }
      ],
      "name": "getTopUp",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "contract ISuperToken",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "contract IStrategy",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "liquidityToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lowerLimit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "upperLimit",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStrollManager.TopUp",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_index",
          "type": "bytes32"
        }
      ],
      "name": "getTopUpByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "contract ISuperToken",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "contract IStrategy",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "liquidityToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lowerLimit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "upperLimit",
              "type": "uint64"
            }
          ],
          "internalType": "struct IStrollManager.TopUp",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken",
          "type": "address"
        }
      ],
      "name": "getTopUpIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLower",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minUpper",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken",
          "type": "address"
        }
      ],
      "name": "performTopUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_index",
          "type": "bytes32"
        }
      ],
      "name": "performTopUpByIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "removeApprovedStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_lowerLimit",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_upperLimit",
          "type": "uint64"
        }
      ],
      "name": "setLimits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x752b6a2010d5bea18cad5db6c38b0701d73b280a7e9cb430e18d3e458a3b6682",
  "receipt": {
    "to": null,
    "from": "0x917A19E71a2811504C4f64aB33c132063B5772a5",
    "contractAddress": "0x896d448119F6901d27845f77083Dfe5456C05099",
    "transactionIndex": 11,
    "gasUsed": "2651029",
    "logsBloom": "0x
    "blockHash": "0xe834941b1262acb47071681a2cdda70ee38b0044a75240bd3eedc51bf6e7b715",
    "transactionHash": "0x752b6a2010d5bea18cad5db6c38b0701d73b280a7e9cb430e18d3e458a3b6682",
    "logs": [
      {
        "transactionIndex": 11,
        "blockNumber": 26844431,
        "transactionHash": "0x752b6a2010d5bea18cad5db6c38b0701d73b280a7e9cb430e18d3e458a3b6682",
        "address": "0x896d448119F6901d27845f77083Dfe5456C05099",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000917a19e71a2811504c4f64ab33c132063b5772a5"
        ],
        "data": "0x",
        "logIndex": 23,
        "blockHash": "0xe834941b1262acb47071681a2cdda70ee38b0044a75240bd3eedc51bf6e7b715"
      },
      {
        "transactionIndex": 11,
        "blockNumber": 26844431,
        "transactionHash": "0x752b6a2010d5bea18cad5db6c38b0701d73b280a7e9cb430e18d3e458a3b6682",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000917a19e71a2811504c4f64ab33c132063b5772a5",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000013fc0bcc3024cd80000000000000000000000000000000000000000000000004727e0c8aaeca8770000000000000000000000000000000000000000000004db4dbc629bccf792c000000000000000000000000000000000000000000000000045e8200be7ea5b9f0000000000000000000000000000000000000000000004db4efc23588ff9df98",
        "logIndex": 24,
        "blockHash": "0xe834941b1262acb47071681a2cdda70ee38b0044a75240bd3eedc51bf6e7b715"
      }
    ],
    "blockNumber": 26844431,
    "cumulativeGasUsed": "3382191",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x49e565Ed1bdc17F3d220f72DF0857C26FA83F873",
    172800,
    604800
  ],
  "numDeployments": 1,
  "solcInputHash": "9735ef645084ce25b8e76e47c863ac1a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_icfa\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_minLower\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_minUpper\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"limitGiven\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minLimit\",\"type\":\"uint64\"}],\"name\":\"InsufficientLimits\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"expirationTimeGiven\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"timeNow\",\"type\":\"uint256\"}],\"name\":\"InvalidExpirationTime\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"InvalidStrategy\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"index\",\"type\":\"bytes32\"}],\"name\":\"TopUpNotRequired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"expectedCaller\",\"type\":\"address\"}],\"name\":\"UnauthorizedCaller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"}],\"name\":\"UnsupportedSuperToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"lowerLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"upperLimit\",\"type\":\"uint64\"}],\"name\":\"WrongLimits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"AddedApprovedStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"lowerLimit\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"upperLimit\",\"type\":\"uint64\"}],\"name\":\"LimitsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topUpAmount\",\"type\":\"uint256\"}],\"name\":\"PerformedTopUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"RemovedApprovedStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowerLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upperLimit\",\"type\":\"uint256\"}],\"name\":\"TopUpCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"}],\"name\":\"TopUpDeleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CFA_V1\",\"outputs\":[{\"internalType\":\"contract IConstantFlowAgreementV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"addApprovedStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedStrategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"}],\"name\":\"checkTopUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_index\",\"type\":\"bytes32\"}],\"name\":\"checkTopUpByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_lowerLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_upperLimit\",\"type\":\"uint64\"}],\"name\":\"createTopUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_indices\",\"type\":\"bytes32[]\"}],\"name\":\"deleteBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"}],\"name\":\"deleteTopUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_index\",\"type\":\"bytes32\"}],\"name\":\"deleteTopUpByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"}],\"name\":\"getTopUp\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowerLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"upperLimit\",\"type\":\"uint64\"}],\"internalType\":\"struct IStrollManager.TopUp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_index\",\"type\":\"bytes32\"}],\"name\":\"getTopUpByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowerLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"upperLimit\",\"type\":\"uint64\"}],\"internalType\":\"struct IStrollManager.TopUp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"}],\"name\":\"getTopUpIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLower\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUpper\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"}],\"name\":\"performTopUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_index\",\"type\":\"bytes32\"}],\"name\":\"performTopUpByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"removeApprovedStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_lowerLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_upperLimit\",\"type\":\"uint64\"}],\"name\":\"setLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Harsh Prakash <0xharsh@proton.me>\",\"errors\":{\"InsufficientLimits(uint64,uint64)\":[{\"params\":{\"limitGiven\":\"Limit (upper/lower) given by the user.\",\"minLimit\":\"Minimum limit (upper/lower) expected.\"}}],\"InvalidExpirationTime(uint64,uint256)\":[{\"params\":{\"expirationTimeGiven\":\"Time given as expiration time by a user.\",\"timeNow\":\"Current time (block.timestamp).\"}}],\"InvalidStrategy(address)\":[{\"params\":{\"strategy\":\"Address of the strategy contract.\"}}],\"TopUpNotRequired(bytes32)\":[{\"params\":{\"index\":\"Index id associated with the top up request.\"}}],\"UnauthorizedCaller(address,address)\":[{\"params\":{\"caller\":\"Address of the caller of the function.\",\"expectedCaller\":\"Address of the expected caller.\"}}],\"UnsupportedSuperToken(address)\":[{\"params\":{\"superToken\":\"Address of the supertoken which isn't supported.\"}}],\"WrongLimits(uint64,uint64)\":[{\"params\":{\"lowerLimit\":\"Limit (upper/lower) given by the user.\",\"upperLimit\":\"Minimum limit (upper/lower) expected.\"}}]},\"kind\":\"dev\",\"methods\":{\"addApprovedStrategy(address)\":{\"details\":\"IStrollManager.addApprovedStrategy implementation.\"},\"checkTopUp(address,address,address)\":{\"details\":\"IStrollManager.checkTopUp implementation.\"},\"checkTopUpByIndex(bytes32)\":{\"details\":\"IStrollManager.checkTopUpByIndex implementation.\"},\"createTopUp(address,address,address,uint64,uint64,uint64)\":{\"details\":\"IStrollManager.createTopUp implementation.\"},\"deleteBatch(bytes32[])\":{\"details\":\"IStrollManager.deleteBatch implementation.\"},\"deleteTopUp(address,address,address)\":{\"details\":\"IStrollManager.deleteTopUp implementation.\"},\"deleteTopUpByIndex(bytes32)\":{\"details\":\"IStrollManager.deleteTopUpByIndex implementation.\"},\"getTopUp(address,address,address)\":{\"details\":\"IStrollManager.getTopUp implementation.\"},\"getTopUpByIndex(bytes32)\":{\"details\":\"IStrollManager.getTopUpByIndex implementation.\"},\"getTopUpIndex(address,address,address)\":{\"details\":\"IStrollManager.getTopUpIndex implementation.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performTopUp(address,address,address)\":{\"details\":\"IStrollManager.performTopUp implementation.\"},\"performTopUpByIndex(bytes32)\":{\"details\":\"IStrollManager.performTopUpByIndex implementation.\"},\"removeApprovedStrategy(address)\":{\"details\":\"IStrollManager.removeApprovedStrategy implementation.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setLimits(uint64,uint64)\":{\"details\":\"IStrollManager.setLimits implementation.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"approvedStrategies\":{\"details\":\"IStrollManager.approvedStrategies implementation.\"},\"minLower\":{\"details\":\"IStrollManager.minLower implementation.\"},\"minUpper\":{\"details\":\"IStrollManager.minUpper implementation.\"}},\"title\":\"StrollManager\",\"version\":1},\"userdoc\":{\"errors\":{\"InsufficientLimits(uint64,uint64)\":[{\"notice\":\"Custom error to indicate the limits given by a user are insufficient.\"}],\"InvalidExpirationTime(uint64,uint256)\":[{\"notice\":\"Custom error to indicate expiration time given is invalid.\"}],\"InvalidStrategy(address)\":[{\"notice\":\"Custom error to indicate addition/usage of invalid strategy.\"}],\"TopUpNotRequired(bytes32)\":[{\"notice\":\"Custom error to indicate top up is not required and the index id associated with that top-up.\"}],\"UnauthorizedCaller(address,address)\":[{\"notice\":\"Custom error to indicate caller of a function is unauthorized.\"}],\"UnsupportedSuperToken(address)\":[{\"notice\":\"Custom error to indicate that supertoken provided isn't supported.\"}],\"WrongLimits(uint64,uint64)\":[{\"notice\":\"Custom error to indicate that the limits are wrong (lower limit >= upper limit).\"}],\"ZeroAddress()\":[{\"notice\":\"Custom error to indicate that null address has been passed.\"}]},\"kind\":\"user\",\"methods\":{},\"notice\":\"StrollManager is a contract that manages top ups for the Stroll protocol.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrollManager.sol\":\"StrollManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0xe4e0b7e3f0265ffaa565d26acd2d45f2633f19127ed625e5a05a9f201a87a667\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"../superfluid/ISuperAgreement.sol\\\";\\nimport { ISuperfluidToken } from \\\"../superfluid/ISuperfluidToken.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid's constant flow agreement interface\\n *\\n * @author Superfluid\\n */\\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\\n\\n    /// @dev ISuperAgreement.agreementType implementation\\n    function agreementType() external override pure returns (bytes32) {\\n        return keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\");\\n    }\\n\\n    /**\\n     * @dev Get the maximum flow rate allowed with the deposit\\n     * @param deposit Deposit amount used for creating the flow\\n     */\\n    function getMaximumFlowRateFromDeposit(\\n        ISuperfluidToken token,\\n        uint256 deposit)\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @dev Get the deposit required for creating the flow\\n     * @param flowRate Flow rate to be tested\\n     * \\n     * NOTE: \\n     * - if calculated deposit (flowRate * liquidationPeriod) is less\\n     *   than the minimum deposit, we use the minimum deposit otherwise\\n     *   we use the calculated deposit\\n     */\\n    function getDepositRequiredForFlowRate(\\n        ISuperfluidToken token,\\n        int96 flowRate)\\n        external view virtual\\n        returns (uint256 deposit);\\n\\n    /**\\n     * @dev Create a flow betwen sender and receiver.\\n     * @param token Super token address.\\n     * @param receiver Flow receiver address.\\n     * @param flowRate New flow rate in amount per second.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementCreated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - A deposit is taken as safety margin for the solvency agents.\\n     * - A extra gas fee may be taken to pay for solvency agent liquidations.\\n     */\\n    function createFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n    /**\\n     * @dev Update the flow rate between sender and receiver.\\n     * @param token Super token address.\\n     * @param receiver Flow receiver address.\\n     * @param flowRate New flow rate in amount per second.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementUpdated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Only the flow sender may update the flow rate.\\n     * - Even if the flow rate is zero, the flow is not deleted\\n     * from the system.\\n     * - Deposit amount will be adjusted accordingly.\\n     * - No new gas fee is charged.\\n     */\\n    function updateFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n\\n    /**\\n     * @dev Get the flow data between `sender` and `receiver`.\\n     * @param token Super token address.\\n     * @param sender Flow receiver.\\n     * @param receiver Flow sender.\\n     * @return timestamp Timestamp of when the flow is updated.\\n     * @return flowRate The flow rate.\\n     * @return deposit The amount of deposit the flow.\\n     * @return owedDeposit The amount of owed deposit of the flow.\\n     */\\n    function getFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @dev Get flow data using agreement ID\\n     * @param token Super token address.\\n     * @param agreementId The agreement ID.\\n     * @return timestamp Timestamp of when the flow is updated.\\n     * @return flowRate The flow rate.\\n     * @return deposit The amount of deposit the flow.\\n     * @return owedDeposit The amount of owed deposit of the flow.\\n     */\\n    function getFlowByID(\\n       ISuperfluidToken token,\\n       bytes32 agreementId\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @dev Get the aggregated flow info of the account\\n     * @param token Super token address.\\n    * @param account Account for the query.\\n    */\\n    function getAccountFlowInfo(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /**\\n     * @dev Get the net flow rate of the account\\n     * @param token Super token address.\\n     * @param account Account for the query.\\n     * @return flowRate Flow rate.\\n     */\\n    function getNetFlow(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @dev Delete the flow between sender and receiver\\n     * @param token Super token address.\\n     * @param ctx Context bytes.\\n     * @param receiver Flow receiver address.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementTerminated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Both flow sender and receiver may delete the flow.\\n     * - If Sender account is insolvent or in critical state, a solvency agent may\\n     *   also terminate the agreement.\\n     * - Gas fee may be returned to the sender.\\n     */\\n    function deleteFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n     /**\\n      * @dev Flow updated event.\\n      * @param token Super token address.\\n      * @param sender Flow sender address.\\n      * @param receiver Flow recipient address.\\n      * @param flowRate Flow rate in amount per second for this flow.\\n      * @param flowRate Total flow rate in amount per second for the sender.\\n      * @param flowRate Total flow rate in amount per second for the receiver.\\n      * @param userData The user provided data.\\n      */\\n     event FlowUpdated(\\n         ISuperfluidToken indexed token,\\n         address indexed sender,\\n         address indexed receiver,\\n         int96 flowRate,\\n         int256 totalSenderFlowRate,\\n         int256 totalReceiverFlowRate,\\n         bytes userData\\n     );\\n\\n}\\n\",\"keccak256\":\"0xd42f8c6825dc5088d78e0959cd44f1048dbc970563d7b8d18bae97fcfdc966a1\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\n/**\\n * @dev Super app definitions library\\n */\\nlibrary SuperAppDefinitions {\\n\\n    /**************************************************************************\\n    / App manifest config word\\n    /**************************************************************************/\\n\\n    /*\\n     * App level is a way to allow the app to whitelist what other app it can\\n     * interact with (aka. composite app feature).\\n     *\\n     * For more details, refer to the technical paper of superfluid protocol.\\n     */\\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\\n\\n    // The app is at the final level, hence it doesn't want to interact with any other app\\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\\n\\n    // The app is at the second level, it may interact with other final level apps if whitelisted\\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\\n\\n    function getAppLevel(uint256 configWord) internal pure returns (uint8) {\\n        return uint8(configWord & APP_LEVEL_MASK);\\n    }\\n\\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\\n    }\\n\\n    /**************************************************************************\\n    / Callback implementation bit masks\\n    /**************************************************************************/\\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\\n\\n    /**************************************************************************\\n    / App Jail Reasons\\n    /**************************************************************************/\\n\\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\\n}\\n\\n/**\\n * @dev Context definitions library\\n */\\nlibrary ContextDefinitions {\\n\\n    /**************************************************************************\\n    / Call info\\n    /**************************************************************************/\\n\\n    // app level\\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\\n\\n    // call type\\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\\n\\n    function decodeCallInfo(uint256 callInfo)\\n        internal pure\\n        returns (uint8 appLevel, uint8 callType)\\n    {\\n        appLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n    function encodeCallInfo(uint8 appLevel, uint8 callType)\\n        internal pure\\n        returns (uint256 callInfo)\\n    {\\n        return uint256(appLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n}\\n\\n/**\\n * @dev Batch operation library\\n */\\nlibrary BatchOperation {\\n    /**\\n     * @dev ERC20.approve batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationApprove(\\n     *     abi.decode(data, (address spender, uint256 amount))\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\\n    /**\\n     * @dev ERC20.transferFrom batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationTransferFrom(\\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\\n    /**\\n     * @dev SuperToken.upgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationUpgrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\\n    /**\\n     * @dev SuperToken.downgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationDowngrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\\n    /**\\n     * @dev Superfluid.callAgreement batch operation type\\n     *\\n     * Call spec:\\n     * callAgreement(\\n     *     ISuperAgreement(target)),\\n     *     abi.decode(data, (bytes calldata, bytes userdata)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\\n    /**\\n     * @dev Superfluid.callAppAction batch operation type\\n     *\\n     * Call spec:\\n     * callAppAction(\\n     *     ISuperApp(target)),\\n     *     data\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\\n}\\n\\nlibrary SuperfluidGovernanceConfigs {\\n\\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.superfluid.rewardAddress\\\");\\n\\n    bytes32 constant internal CFAv1_LIQUIDATION_PERIOD_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.liquidationPeriod\\\");\\n\\n    bytes32 constant internal SUPERTOKEN_MINIMUM_DEPOSIT_KEY = \\n        keccak256(\\\"org.superfluid-finance.superfluid.superTokenMinimumDeposit\\\");\\n\\n    function getTrustedForwarderConfigKey(address forwarder) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.trustedForwarder\\\",\\n            forwarder));\\n    }\\n\\n    function getAppRegistrationConfigKey(address deployer, string memory registrationKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\\\",\\n            deployer,\\n            registrationKey));\\n    }\\n\\n    function getAppFactoryConfigKey(address factory) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.appWhiteListing.factory\\\",\\n            factory));\\n    }\\n}\\n\",\"keccak256\":\"0x629a096aa6ce1da21b6d6861ebcd640257fc3c77e5d7f7de5de73b251a0be4b3\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\n\\n/**\\n * @title Superfluid's agreement interface.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperAgreement {\\n\\n    /**\\n     * @dev Initialize the agreement contract\\n     */\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the type of the agreement class.\\n     */\\n    function agreementType() external view returns (bytes32);\\n\\n    /**\\n     * @dev Calculate the real-time balance for the account of this agreement class.\\n     * @param account Account the state belongs to\\n     * @param time Future time used for the calculation.\\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement.\\n     * @return deposit Account deposit amount of this agreement.\\n     * @return owedDeposit Account owed deposit amount of this agreement.\\n     */\\n    function realtimeBalanceOf(\\n        ISuperfluidToken token,\\n        address account,\\n        uint256 time\\n    )\\n        external\\n        view\\n        returns (\\n            int256 dynamicBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n}\\n\",\"keccak256\":\"0xcf8a33fadd5db47562156a11098623246efd1b46a2c3d28269767bcbb324fd66\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\n\\n/**\\n * @title Superfluid's app interface.\\n *\\n * NOTE:\\n * - Be fearful of the app jail, when the word permitted is used.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperApp {\\n\\n    /**\\n     * @dev Callback before a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n     * @dev Callback after a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param cbdata The data returned from the before-hook callback.\\n     * @param ctx The context data.\\n     * @return newCtx The current context of the transaction.\\n     *\\n     * NOTE:\\n     * - State changes is permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function afterAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n     * @dev Callback before a new agreement is updated.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n\\n    /**\\n    * @dev Callback after a new agreement is updated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Only revert with a \\\"reason\\\" is permitted.\\n    */\\n    function afterAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n    * @dev Callback before a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param ctx The context data.\\n    * @return cbdata A free format in memory data the app can use to pass\\n    *          arbitary information to the after-hook callback.\\n    *\\n    * NOTE:\\n    * - It will be invoked with `staticcall`, no state changes are permitted.\\n    * - Revert is not permitted.\\n    */\\n    function beforeAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n    * @dev Callback after a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Revert is not permitted.\\n    */\\n    function afterAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n}\\n\",\"keccak256\":\"0xca93702505ec3c8244227e372687d9bdbc9d368fa07723d310ab9550501abb2a\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Superfluid's super token (Superfluid Token + ERC20 + ERC777) interface\\n *\\n * @author Superfluid\\n */\\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\\n\\n    /// @dev Initialize the contract\\n    function initialize(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        string calldata n,\\n        string calldata s\\n    ) external;\\n\\n    /**************************************************************************\\n    * TokenInfo & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: SuperToken always uses 18 decimals.\\n     *\\n     * Note: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view override(TokenInfo) returns (uint8);\\n\\n    /**************************************************************************\\n    * ERC20 & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\\n\\n    /**************************************************************************\\n    * ERC20\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**************************************************************************\\n    * ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For super token contracts, this value is 1 always\\n     */\\n    function granularity() external view override(IERC777) returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**************************************************************************\\n     * SuperToken custom token functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Mint new tokens for the account\\n     *\\n     * Modifiers:\\n     *  - onlySelf\\n     */\\n    function selfMint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData\\n    ) external;\\n\\n   /**\\n    * @dev Burn existing tokens for the account\\n    *\\n    * Modifiers:\\n    *  - onlySelf\\n    */\\n   function selfBurn(\\n       address account,\\n       uint256 amount,\\n       bytes memory userData\\n   ) external;\\n\\n    /**************************************************************************\\n     * SuperToken extra functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\\n     */\\n    function transferAll(address recipient) external;\\n\\n    /**************************************************************************\\n     * ERC20 wrapping\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Return the underlying token contract\\n     * @return tokenAddr Underlying token address\\n     */\\n    function getUnderlyingToken() external view returns(address tokenAddr);\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken.\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\\n     * @param to The account to received upgraded tokens\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     * @param data User data for the TokensRecipient callback\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Token upgrade event\\n     * @param account Account where tokens are upgraded to\\n     * @param amount Amount of tokens upgraded (in 18 decimals)\\n     */\\n    event TokenUpgraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Downgrade SuperToken to ERC20.\\n     * @dev It will call transfer to send tokens\\n     * @param amount Number of tokens to be downgraded\\n     */\\n    function downgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Token downgrade event\\n     * @param account Account whose tokens are upgraded\\n     * @param amount Amount of tokens downgraded\\n     */\\n    event TokenDowngraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**************************************************************************\\n    * Batch Operations\\n    *************************************************************************/\\n\\n    /**\\n    * @dev Perform ERC20 approve by host contract.\\n    * @param account The account owner to be approved.\\n    * @param spender The spender of account owner's funds.\\n    * @param amount Number of tokens to be approved.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationApprove(\\n        address account,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Perform ERC20 transfer from by host contract.\\n    * @param account The account to spend sender's funds.\\n    * @param spender  The account where the funds is sent from.\\n    * @param recipient The recipient of thefunds.\\n    * @param amount Number of tokens to be transferred.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationTransferFrom(\\n        address account,\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Upgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationUpgrade(address account, uint256 amount) external;\\n\\n    /**\\n    * @dev Downgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationDowngrade(address account, uint256 amount) external;\\n\\n\\n    /**************************************************************************\\n    * Function modifiers for access control and parameter validations\\n    *\\n    * While they cannot be explicitly stated in function definitions, they are\\n    * listed in function definition comments instead for clarity.\\n    *\\n    * NOTE: solidity-coverage not supporting it\\n    *************************************************************************/\\n\\n    /// @dev The msg.sender must be the contract itself\\n    //modifier onlySelf() virtual\\n\\n}\\n\",\"keccak256\":\"0xba355f7d7d5d32ca345bcdb355759ba598a911ff07227ff80012a5e0bf660fb1\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\nimport {\\n    IERC20,\\n    ERC20WithTokenInfo\\n} from \\\"../tokens/ERC20WithTokenInfo.sol\\\";\\n\\n\\ninterface ISuperTokenFactory {\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /// @dev Initialize the contract\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the current super token logic used by the factory\\n     */\\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Upgradability modes\\n     */\\n    enum Upgradability {\\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\\n        NON_UPGRADABLE,\\n        /// Upgradable through `host.updateSuperTokenLogic` operation\\n        SEMI_UPGRADABLE,\\n        /// Always using the latest super token logic\\n        FULL_UPGRADABE\\n    }\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param underlyingDecimals Underlying token decimals\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     */\\n    function createERC20Wrapper(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token with extra token info\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     *\\n     * NOTE:\\n     * - It assumes token provide the .decimals() function\\n     */\\n    function createERC20Wrapper(\\n        ERC20WithTokenInfo underlyingToken,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        returns (ISuperToken superToken);\\n\\n    function initializeCustomSuperToken(\\n        address customSuperTokenProxy\\n    )\\n        external;\\n\\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\\n\\n    event SuperTokenCreated(ISuperToken indexed token);\\n\\n    event CustomSuperTokenCreated(ISuperToken indexed token);\\n\\n}\\n\",\"keccak256\":\"0x7dc514c6c9eda681ed8ad66ccfb68dc22764b6c429ab55fddbba28b6b148621b\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n// This is required by the batchCall and decodeCtx\\npragma experimental ABIEncoderV2;\\n\\nimport { ISuperfluidGovernance } from \\\"./ISuperfluidGovernance.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperTokenFactory } from \\\"./ISuperTokenFactory.sol\\\";\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperApp } from \\\"./ISuperApp.sol\\\";\\nimport {\\n    SuperAppDefinitions,\\n    ContextDefinitions,\\n    BatchOperation,\\n    SuperfluidGovernanceConfigs\\n} from \\\"./Definitions.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid host interface.\\n\\n * It is the central contract of the system where super agreement, super app\\n * and super token features are connected together.\\n *\\n * The superfluid host contract is also the entry point for the protocol users,\\n * where batch call and meta transaction are provided for UX improvements.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluid {\\n\\n    /**************************************************************************\\n     * Governance\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get the current governace of the Superfluid host\\n     */\\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\\n\\n    event GovernanceReplaced(ISuperfluidGovernance oldGov, ISuperfluidGovernance newGov);\\n    /**\\n     * @dev Replace the current governance with a new one\\n     */\\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\\n\\n    /**************************************************************************\\n     * Agreement Whitelisting\\n     *************************************************************************/\\n\\n    event AgreementClassRegistered(bytes32 agreementType, address code);\\n    /**\\n     * @dev Register a new agreement class to the system\\n     * @param agreementClassLogic INitial agreement class code\\n     *\\n     * Modifiers:\\n     *  - onlyGovernance\\n     */\\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\\n\\n    event AgreementClassUpdated(bytes32 agreementType, address code);\\n    /**\\n    * @dev Update code of an agreement class\\n    * @param agreementClassLogic New code for the agreement class\\n    *\\n    * Modifiers:\\n    *  - onlyGovernance\\n    */\\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\\n\\n    /**\\n    * @dev Get agreement class\\n    */\\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\\n\\n    /**\\n    * @dev Map list of the agreement classes using a bitmap\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function mapAgreementClasses(uint256 bitmap)\\n        external view\\n        returns (ISuperAgreement[] memory agreementClasses);\\n\\n    /**\\n    * @dev Create a new bitmask by adding a agreement class to it.\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**\\n    * @dev Create a new bitmask by removing a agreement class from it.\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**************************************************************************\\n    * Super Token Factory\\n    **************************************************************************/\\n\\n    /**\\n     * @dev Get the super token factory\\n     * @return factory The factory\\n     */\\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\\n\\n    /**\\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\\n     * @return logic The factory logic\\n     */\\n    function getSuperTokenFactoryLogic() external view returns (address logic);\\n\\n    event SuperTokenFactoryUpdated(ISuperTokenFactory newFactory);\\n    /**\\n     * @dev Update super token factory\\n     * @param newFactory New factory logic\\n     */\\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\\n\\n    event SuperTokenLogicUpdated(ISuperToken indexed token, address code);\\n    /**\\n     * @dev Update the super token logic to the latest\\n     *\\n     * NOTE:\\n     * - Refer toISuperTokenFactory.Upgradability for expected behaviours.\\n     */\\n    function updateSuperTokenLogic(ISuperToken token) external;\\n\\n    /**************************************************************************\\n     * App Registry\\n     *************************************************************************/\\n\\n    /**\\n     * @dev App registered event\\n     */\\n    event AppRegistered(ISuperApp indexed app);\\n\\n    /**\\n     * @dev Jail event for the app\\n     */\\n    event Jail(ISuperApp indexed app, uint256 reason);\\n\\n    /**\\n     * @dev Message sender declares it as a super app\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     *                   `SuperAppDefinitions`\\n     */\\n    function registerApp(uint256 configWord) external;\\n\\n    /**\\n     * @dev Message sender declares it as a super app, using a registration key\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     *                   `SuperAppDefinitions`\\n     * @param registrationKey The registration key issued by the governance\\n     */\\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey) external;\\n\\n    /**\\n     * @dev Message sender declares app as a super app\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     *                   `SuperAppDefinitions`\\n     * NOTE: only factory contracts authorized by governance can register super apps\\n     */\\n    function registerAppByFactory(ISuperApp app, uint256 configWord) external;\\n\\n    /**\\n     * @dev Query if the app is registered\\n     * @param app Super app address\\n     */\\n    function isApp(ISuperApp app) external view returns(bool);\\n\\n    /**\\n     * @dev Query app level\\n     * @param app Super app address\\n     */\\n    function getAppLevel(ISuperApp app) external view returns(uint8 appLevel);\\n\\n    /**\\n     * @dev Get the manifest of the super app\\n     * @param app Super app address\\n     */\\n    function getAppManifest(\\n        ISuperApp app\\n    )\\n        external view\\n        returns (\\n            bool isSuperApp,\\n            bool isJailed,\\n            uint256 noopMask\\n        );\\n\\n    /**\\n     * @dev Query if the app has been jailed\\n     * @param app Super app address\\n     */\\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\\n\\n    /**\\n     * @dev White-list the target app for app composition for the source app (msg.sender)\\n     * @param targetApp The taget super app address\\n     */\\n    function allowCompositeApp(ISuperApp targetApp) external;\\n\\n    /**\\n     * @dev Query if source app  is allowed to call the target app as downstream app.\\n     * @param app Super app address\\n     * @param targetApp The taget super app address\\n     */\\n    function isCompositeAppAllowed(\\n        ISuperApp app,\\n        ISuperApp targetApp\\n    )\\n        external view\\n        returns (bool isAppAllowed);\\n\\n    /**************************************************************************\\n     * Agreement Framework\\n     *\\n     * Agreements use these function to trigger super app callbacks, updates\\n     * app allowance and charge gas fees.\\n     *\\n     * These functions can only be called by registered agreements.\\n     *************************************************************************/\\n\\n    function callAppBeforeCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory cbdata);\\n\\n    function callAppAfterCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory appCtx);\\n\\n    function appCallbackPush(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 appAllowanceGranted,\\n        int256 appAllowanceUsed,\\n        ISuperfluidToken appAllowanceToken\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory appCtx);\\n\\n    function appCallbackPop(\\n        bytes calldata ctx,\\n        int256 appAllowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function ctxUseAllowance(\\n        bytes calldata ctx,\\n        uint256 appAllowanceWantedMore,\\n        int256 appAllowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function jailApp(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 reason\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    /**************************************************************************\\n     * Contextless Call Proxies\\n     *\\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\\n     * with agreements or apps.\\n     *\\n     * NOTE: The contextual call data should be generated using\\n     * abi.encodeWithSelector. The context parameter should be set to \\\"0x\\\",\\n     * an empty bytes array as a placeholder to be replaced by the host\\n     * contract.\\n     *************************************************************************/\\n\\n     /**\\n      * @dev Call agreement function\\n      * @param callData The contextual call data with placeholder ctx\\n      * @param userData Extra user data being sent to the super app callbacks\\n      */\\n     function callAgreement(\\n         ISuperAgreement agreementClass,\\n         bytes calldata callData,\\n         bytes calldata userData\\n     )\\n        external\\n        //cleanCtx\\n        returns(bytes memory returnedData);\\n\\n    /**\\n     * @dev Call app action\\n     * @param callData The contextual call data.\\n     *\\n     * NOTE: See callAgreement about contextual call data.\\n     */\\n    function callAppAction(\\n        ISuperApp app,\\n        bytes calldata callData\\n    )\\n        external\\n        //cleanCtx\\n        //isAppActive(app)\\n        returns(bytes memory returnedData);\\n\\n    /**************************************************************************\\n     * Contextual Call Proxies and Context Utilities\\n     *\\n     * For apps, they must use context they receive to interact with\\n     * agreements or apps.\\n     *\\n     * The context changes must be saved and returned by the apps in their\\n     * callbacks always, any modification to the context will be detected and\\n     * the violating app will be jailed.\\n     *************************************************************************/\\n\\n    /**\\n     * @dev ABIv2 Encoded memory data of context\\n     *\\n     * NOTE on backward compatibility:\\n     * - Non-dynamic fields are padded to 32bytes and packed\\n     * - Dynamic fields are referenced through a 32bytes offset to their \\\"parents\\\" field (or root)\\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\\n     *    - non-dynamic fields will be parsed at the same memory location,\\n     *    - and dynamic fields will simply have a greater offset than it was.\\n     */\\n    struct Context {\\n        //\\n        // Call context\\n        //\\n        // callback level\\n        uint8 appLevel;\\n        // type of call\\n        uint8 callType;\\n        // the system timestsamp\\n        uint256 timestamp;\\n        // The intended message sender for the call\\n        address msgSender;\\n\\n        //\\n        // Callback context\\n        //\\n        // For callbacks it is used to know which agreement function selector is called\\n        bytes4 agreementSelector;\\n        // User provided data for app callbacks\\n        bytes userData;\\n\\n        //\\n        // App context\\n        //\\n        // app allowance granted\\n        uint256 appAllowanceGranted;\\n        // app allowance wanted by the app callback\\n        uint256 appAllowanceWanted;\\n        // app allowance used, allowing negative values over a callback session\\n        int256 appAllowanceUsed;\\n        // app address\\n        address appAddress;\\n        // app allowance in super token\\n        ISuperfluidToken appAllowanceToken;\\n    }\\n\\n    function callAgreementWithContext(\\n        ISuperAgreement agreementClass,\\n        bytes calldata callData,\\n        bytes calldata userData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // onlyAgreement(agreementClass)\\n        returns (bytes memory newCtx, bytes memory returnedData);\\n\\n    function callAppActionWithContext(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // isAppActive(app)\\n        returns (bytes memory newCtx);\\n\\n    function decodeCtx(bytes calldata ctx)\\n        external pure\\n        returns (Context memory context);\\n\\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\\n\\n    /**************************************************************************\\n    * Batch call\\n    **************************************************************************/\\n    /**\\n     * @dev Batch operation data\\n     */\\n    struct Operation {\\n        // Operation. Defined in BatchOperation (Definitions.sol)\\n        uint32 operationType;\\n        // Operation target\\n        address target;\\n        // Data specific to the operation\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Batch call function\\n     * @param operations Array of batch operations.\\n     */\\n    function batchCall(Operation[] memory operations) external;\\n\\n    /**\\n     * @dev Batch call function for trusted forwarders (EIP-2771)\\n     * @param operations Array of batch operations.\\n     */\\n    function forwardBatchCall(Operation[] memory operations) external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * TODO: turning these off because solidity-coverage don't like it\\n     *************************************************************************/\\n\\n     /* /// @dev The current superfluid context is clean.\\n     modifier cleanCtx() virtual;\\n\\n     /// @dev The superfluid context is valid.\\n     modifier validCtx(bytes memory ctx) virtual;\\n\\n     /// @dev The agreement is a listed agreement.\\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\\n\\n     // onlyGovernance\\n\\n     /// @dev The msg.sender must be a listed agreement.\\n     modifier onlyAgreement() virtual;\\n\\n     /// @dev The app is registered and not jailed.\\n     modifier isAppActive(ISuperApp app) virtual; */\\n}\\n\",\"keccak256\":\"0x987a883e8acd87e07eb00ebb1c882d294c7a0af2e5a8cb234270f83f4168438f\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperfluidToken  } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid's Governance interface\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluidGovernance {\\n\\n    /**\\n     * @dev Replace the current governance with a new governance\\n     */\\n    function replaceGovernance(\\n        ISuperfluid host,\\n        address newGov) external;\\n\\n    /**\\n     * @dev Register a new agreement class\\n     */\\n    function registerAgreementClass(\\n        ISuperfluid host,\\n        address agreementClass) external;\\n\\n    /**\\n     * @dev Update logics of the contracts\\n     *\\n     * NOTE:\\n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\\n     */\\n    function updateContracts(\\n        ISuperfluid host,\\n        address hostNewLogic,\\n        address[] calldata agreementClassNewLogics,\\n        address superTokenFactoryNewLogic\\n    ) external;\\n\\n    /**\\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\\n     */\\n    function batchUpdateSuperTokenLogic(\\n        ISuperfluid host,\\n        ISuperToken[] calldata tokens) external;\\n\\n    /// @dev Get configuration as address value\\n    function getConfigAsAddress(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (address value);\\n\\n    /// @dev Get configuration as uint256 value\\n    function getConfigAsUint256(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (uint256 value);\\n\\n}\\n\",\"keccak256\":\"0x2ac401c7fb012ef43d8becad0196bcd41ac9ad33778a7a5e4809a1740a646e63\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\n\\n\\n/**\\n * @title Superfluid's token interface.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluidToken {\\n\\n    /**************************************************************************\\n     * Basic information\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /**\\n     * @dev Encoded liquidation type data mainly used for handling stack to deep errors\\n     * \\n     * Note:\\n     * - version: 1 \\n     * - liquidationType key:\\n     *    - 0 = reward account receives reward (PIC period)\\n     *    - 1 = liquidator account receives reward (Pleb period)\\n     *    - 2 = liquidator account receives reward (Pirate period/bailout)\\n     */\\n    struct LiquidationTypeData {\\n        uint256 version;\\n        uint8 liquidationType;\\n    }\\n\\n    /**************************************************************************\\n     * Real-time balance functions\\n     *************************************************************************/\\n\\n    /**\\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\\n    * @param account for the query\\n    * @param timestamp Time of balance\\n    * @return availableBalance Real-time balance\\n    * @return deposit Account deposit\\n    * @return owedDeposit Account owed Deposit\\n    */\\n    function realtimeBalanceOf(\\n       address account,\\n       uint256 timestamp\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /// @dev realtimeBalanceOf with timestamp equals to block timestamp\\n    function realtimeBalanceOfNow(\\n       address account\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit,\\n            uint256 timestamp);\\n\\n    /**\\n    * @dev Check if one account is critical\\n    * @param account Account check if is critical by a future time\\n    * @param timestamp Time of balance\\n    * @return isCritical\\n    */\\n    function isAccountCritical(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n    * @dev Check if one account is critical now\\n    * @param account Account check if is critical by a future time\\n    * @return isCritical\\n    */\\n    function isAccountCriticalNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n     * @dev Check if one account is solvent\\n     * @param account Account check if is solvent by a future time\\n     * @param timestamp Time of balance\\n     * @return isSolvent\\n     */\\n    function isAccountSolvent(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n     * @dev Check if one account is solvent now\\n     * @param account Account check if is solvent now\\n     * @return isSolvent\\n     */\\n    function isAccountSolventNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n    * @dev Get a list of agreements that is active for the account\\n    * @dev An active agreement is one that has state for the account\\n    * @param account Account to query\\n    * @return activeAgreements List of accounts that have non-zero states for the account\\n    */\\n    function getAccountActiveAgreements(address account)\\n       external view\\n       returns(ISuperAgreement[] memory activeAgreements);\\n\\n\\n   /**************************************************************************\\n    * Super Agreement hosting functions\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function createAgreement(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement creation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementCreated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Get data of the agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @return data Data of the agreement\\n     */\\n    function getAgreementData(\\n        address agreementClass,\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external view\\n        returns(bytes32[] memory data);\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function updateAgreementData(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement creation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementUpdated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Close the agreement\\n     * @param id Agreement ID\\n     */\\n    function terminateAgreement(\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement termination event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     */\\n    event AgreementTerminated(\\n        address indexed agreementClass,\\n        bytes32 id\\n    );\\n\\n    /**\\n     * @dev Update agreement state slot\\n     * @param account Account to be updated\\n     *\\n     * NOTE\\n     * - To clear the storage out, provide zero-ed array of intended length\\n     */\\n    function updateAgreementStateSlot(\\n        address account,\\n        uint256 slotId,\\n        bytes32[] calldata slotData\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement account state updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account updated\\n     * @param slotId slot id of the agreement state\\n     */\\n    event AgreementStateUpdated(\\n        address indexed agreementClass,\\n        address indexed account,\\n        uint256 slotId\\n    );\\n\\n    /**\\n     * @dev Get data of the slot of the state of a agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account to query\\n     * @param slotId slot id of the state\\n     * @param dataLength length of the state data\\n     */\\n    function getAgreementStateSlot(\\n        address agreementClass,\\n        address account,\\n        uint256 slotId,\\n        uint dataLength\\n    )\\n        external view\\n        returns (bytes32[] memory slotData);\\n\\n    /**\\n     * @dev Settle balance from an account by the agreement.\\n     *      The agreement needs to make sure that the balance delta is balanced afterwards\\n     * @param account Account to query.\\n     * @param delta Amount of balance delta to be settled\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function settleBalance(\\n        address account,\\n        int256 delta\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAccount Account that collect the reward\\n     * @param rewardAmount Amount of liquidation reward\\n     */\\n    event AgreementLiquidated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed rewardAccount,\\n        uint256 rewardAmount\\n    );\\n\\n    /**\\n     * @dev System bailout occurred (DEPRECATIED BY AgreementLiquidatedBy)\\n     * @param bailoutAccount Account that bailout the penalty account\\n     * @param bailoutAmount Amount of account bailout\\n     */\\n    event Bailout(\\n        address indexed bailoutAccount,\\n        uint256 bailoutAmount\\n    );\\n\\n    /**\\n     * @dev Agreement liquidation event (including agent account)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param bondAccount Account that collect the reward or bailout accounts\\n     * @param rewardAmount Amount of liquidation reward\\n     * @param bailoutAmount Amount of liquidation bailouot\\n     *\\n     * NOTE:\\n     * Reward account rule:\\n     * - if bailout is equal to 0, then\\n     *   - the bondAccount will get the rewardAmount,\\n     *   - the penaltyAccount will pay for the rewardAmount.\\n     * - if bailout is larger than 0, then\\n     *   - the liquidatorAccount will get the rewardAmouont,\\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\\n     */\\n    event AgreementLiquidatedBy(\\n        address liquidatorAccount,\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed bondAccount,\\n        uint256 rewardAmount,\\n        uint256 bailoutAmount\\n    );\\n\\n    /**\\n     * @dev Make liquidation payouts\\n     * @param id Agreement ID\\n     * @param liquidator Address of the executer of liquidation\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAmount Amount of liquidation reward\\n     * @param bailoutAmount Amount of account bailout needed\\n     *\\n     * NOTE:\\n     * Liquidation rules:\\n     *  - If a bailout is required (bailoutAmount > 0)\\n     *     - the actual reward goes to the liquidator,\\n     *     - while the reward account becomes the bailout account\\n     *     - total bailout include: bailout amount + reward amount\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function makeLiquidationPayouts\\n    (\\n        bytes32 id,\\n        address liquidator,\\n        address penaltyAccount,\\n        uint256 rewardAmount,\\n        uint256 bailoutAmount\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement liquidation event v2 (including agent account)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param liquidatorAccount Address of the executor of the liquidation\\n     * @param targetAccount Account of the stream sender\\n     * @param rewardAccount Account that collects the reward or bails out insolvent accounts\\n     * @param rewardAmount The amount the reward recipient account balance should change by\\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\\n     * @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\\n     *\\n     * NOTE:\\n     * Reward account rule:\\n     * - if the agreement is liquidated during the PIC period\\n     *   - the rewardAccount will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\\n     *   - the targetAccount will pay for the rewardAmount\\n     * - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\\n     *   - the liquidatorAccount will get the rewardAmount (remaining deposit)\\n     *   - the targetAccount will pay for the rewardAmount\\n     * - if the targetAccount is insolvent\\n     *   - the liquidatorAccount will get the rewardAmount (single deposit)\\n     *   - the rewardAccount will pay for both the rewardAmount and bailoutAmount\\n     *   - the targetAccount will receive the bailoutAmount\\n     */\\n    event AgreementLiquidatedV2(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed liquidatorAccount,\\n        address indexed targetAccount,\\n        address rewardAccount,\\n        uint256 rewardAmount,\\n        int256 targetAccountBalanceDelta,\\n        bytes liquidationTypeData\\n    );\\n\\n    /**\\n     * @dev Make liquidation payouts (v2)\\n     * @param id Agreement ID\\n     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type\\n     * @param liquidatorAccount Address of the executor of the liquidation\\n     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\\n     * @param targetAccount Account of the stream sender\\n     * @param rewardAmount The amount the reward recepient account will receive\\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\\n     *\\n     * - If a bailout is required (bailoutAmount > 0)\\n     *   - the actual reward (single deposit) goes to the executor,\\n     *   - while the reward account becomes the bailout account\\n     *   - total bailout include: bailout amount + reward amount\\n     *   - the targetAccount will be bailed out\\n     * - If a bailout is not required\\n     *   - the targetAccount will pay the rewardAmount\\n     *   - the liquidator (reward account in PIC period) will receive the rewardAmount\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function makeLiquidationPayoutsV2\\n    (\\n        bytes32 id,\\n        bytes memory liquidationTypeData,\\n        address liquidatorAccount,\\n        bool useDefaultRewardAccount,\\n        address targetAccount,\\n        uint256 rewardAmount,\\n        int256 targetAccountBalanceDelta\\n    ) external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * NOTE: solidity-coverage not supporting it\\n     *************************************************************************/\\n\\n     /// @dev The msg.sender must be host contract\\n     //modifier onlyHost() virtual;\\n\\n    /// @dev The msg.sender must be a listed agreement.\\n    //modifier onlyAgreement() virtual;\\n\\n}\\n\",\"keccak256\":\"0x6c573b0c0d9ccfc73f787da2e06c725b714d9a36357cfe4fb3c5fb7b47d75665\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.5.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { TokenInfo } from \\\"./TokenInfo.sol\\\";\\n\\n\\n/**\\n *\\n * @dev Interface for ERC20 token with token info\\n *\\n * NOTE: Using abstract contract instead of interfaces because old solidity\\n * does not support interface inheriting other interfaces\\n * solhint-disable-next-line no-empty-blocks\\n *\\n */\\n// solhint-disable-next-line no-empty-blocks\\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\\n\",\"keccak256\":\"0x808d3a486826e7f119671174a77896c6e23578e691625350dbb3e9f74a0d5137\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.5.0;\\n\\n/**\\n * @dev ERC20 token info interface\\n *\\n * NOTE: ERC20 standard interface does not specify these functions, but\\n * often the token implementations have them.\\n *\\n */\\ninterface TokenInfo {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x4dee21b8f64edbfe811a300d31f529b5367d1186d69b8b2b8dc3373be7a108b0\",\"license\":\"AGPLv3\"},\"contracts/StrollManager.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.13;\\n\\nimport { IConstantFlowAgreementV1 } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IERC20Mod.sol\\\";\\nimport \\\"./interfaces/IStrollManager.sol\\\";\\n\\n\\n// solhint-disable not-rely-on-time\\n/// @title StrollManager\\n/// @author Harsh Prakash <0xharsh@proton.me>\\n/// @notice StrollManager is a contract that manages top ups for the Stroll protocol.\\ncontract StrollManager is IStrollManager, Ownable {\\n    IConstantFlowAgreementV1 public immutable CFA_V1;\\n\\n    /// @dev IStrollManager.minLower implementation.\\n    uint64 public override minLower;\\n\\n    /// @dev IStrollManager.minUpper implementation.\\n    uint64 public override minUpper;\\n\\n    /// @dev IStrollManager.approvedStrategies implementation.\\n    mapping(address => bool) public override approvedStrategies;\\n\\n    mapping(bytes32 => TopUp) private topUps; //id = sha3(user, superToken, liquidityToken)\\n\\n    constructor(\\n        address _icfa,\\n        uint64 _minLower,\\n        uint64 _minUpper\\n    ) {\\n        if (_icfa == address(0)) revert ZeroAddress();\\n        if (_minLower >= _minUpper) revert WrongLimits(_minLower, _minUpper);\\n\\n        CFA_V1 = IConstantFlowAgreementV1(_icfa);\\n        minLower = _minLower;\\n        minUpper = _minUpper;\\n    }\\n\\n    /// @dev IStrollManager.createTopUp implementation.\\n    function createTopUp(\\n        address _superToken,\\n        address _strategy,\\n        address _liquidityToken,\\n        uint64 _expiry,\\n        uint64 _lowerLimit,\\n        uint64 _upperLimit\\n    ) external override {\\n        if (_expiry <= block.timestamp)\\n            revert InvalidExpirationTime(_expiry, block.timestamp);\\n\\n        if (_lowerLimit < minLower)\\n            revert InsufficientLimits(_lowerLimit, minLower);\\n\\n        if (_upperLimit < minUpper)\\n            revert InsufficientLimits(_upperLimit, minUpper);\\n\\n        bytes32 index = getTopUpIndex(msg.sender, _superToken, _liquidityToken);\\n\\n        // If index owner/user is address(0), we are creating a new top-up.\\n        if (topUps[index].user != msg.sender) {\\n            if (\\n                _superToken == address(0) ||\\n                _strategy == address(0) ||\\n                _liquidityToken == address(0)\\n            ) revert ZeroAddress();\\n\\n            if (!approvedStrategies[_strategy])\\n                revert InvalidStrategy(_strategy);\\n            if (\\n                !IStrategy(_strategy).isSupportedSuperToken(\\n                    ISuperToken(_superToken)\\n                )\\n            ) revert UnsupportedSuperToken(address(_superToken));\\n\\n            TopUp memory topUp = TopUp( // create new TopUp or update topup\\n                msg.sender,\\n                ISuperToken(_superToken),\\n                IStrategy(_strategy),\\n                _liquidityToken,\\n                _expiry,\\n                _lowerLimit,\\n                _upperLimit\\n            );\\n\\n            topUps[index] = topUp;\\n        } else {\\n            // Else just update the limits and expiry, save gas.\\n\\n            topUps[index].expiry = _expiry;\\n            topUps[index].lowerLimit = _lowerLimit;\\n            topUps[index].upperLimit = _upperLimit;\\n        }\\n\\n        emit TopUpCreated(\\n            index,\\n            msg.sender,\\n            _superToken,\\n            _strategy,\\n            _liquidityToken,\\n            _expiry,\\n            _lowerLimit,\\n            _upperLimit\\n        );\\n    }\\n\\n    /// @dev IStrollManager.performTopUp implementation.\\n    function performTopUp(\\n        address _user,\\n        address _superToken,\\n        address _liquidityToken\\n    ) external override {\\n        performTopUpByIndex(getTopUpIndex(_user, _superToken, _liquidityToken));\\n    }\\n\\n    /// @dev IStrollManager.deleteTopUp implementation.\\n    function deleteTopUp(\\n        address _user,\\n        address _superToken,\\n        address _liquidityToken\\n    ) external override {\\n        deleteTopUpByIndex(getTopUpIndex(_user, _superToken, _liquidityToken));\\n    }\\n\\n    /// @dev IStrollManager.deleteBatch implementation.\\n    function deleteBatch(bytes32[] calldata _indices) external override {\\n        // delete multiple top ups\\n        uint256 length = _indices.length;\\n        for (uint256 i; i < length; ++i) {\\n            deleteTopUpByIndex(_indices[i]);\\n        }\\n    }\\n\\n    /// @dev IStrollManager.addApprovedStrategy implementation.\\n    function addApprovedStrategy(address _strategy)\\n        external\\n        override\\n        onlyOwner\\n    {\\n        if (_strategy == address(0)) revert InvalidStrategy(_strategy);\\n        if (!approvedStrategies[_strategy]) {\\n            approvedStrategies[_strategy] = true;\\n            emit AddedApprovedStrategy(_strategy);\\n        }\\n    }\\n\\n    /// @dev IStrollManager.removeApprovedStrategy implementation.\\n    function removeApprovedStrategy(address _strategy) external onlyOwner {\\n        if (approvedStrategies[_strategy]) {\\n            delete approvedStrategies[_strategy];\\n            emit RemovedApprovedStrategy(_strategy);\\n        }\\n    }\\n\\n    /// @dev IStrollManager.setLimits implementation.\\n    function setLimits(uint64 _lowerLimit, uint64 _upperLimit)\\n        external\\n        onlyOwner\\n    {\\n        if (_lowerLimit >= _upperLimit)\\n            revert WrongLimits(_lowerLimit, _upperLimit);\\n\\n        minLower = _lowerLimit;\\n        minUpper = _upperLimit;\\n\\n        emit LimitsChanged(_lowerLimit, _upperLimit);\\n    }\\n\\n    /// @dev IStrollManager.getTopUp implementation.\\n    function getTopUp(\\n        address _user,\\n        address _superToken,\\n        address _liquidityToken\\n    ) external view returns (TopUp memory) {\\n        return\\n            getTopUpByIndex(getTopUpIndex(_user, _superToken, _liquidityToken));\\n    }\\n\\n    /// @dev IStrollManager.checkTopUp implementation.\\n    function checkTopUp(\\n        address _user,\\n        address _superToken,\\n        address _liquidityToken\\n    ) external view override returns (uint256) {\\n        return\\n            checkTopUpByIndex(\\n                getTopUpIndex(_user, _superToken, _liquidityToken)\\n            );\\n    }\\n\\n    /// @dev IStrollManager.performTopUpByIndex implementation.\\n    function performTopUpByIndex(bytes32 _index) public {\\n        uint256 topUpAmount = checkTopUpByIndex(_index);\\n\\n        if (topUpAmount == 0) revert TopUpNotRequired(_index);\\n\\n        TopUp storage topUp = topUps[_index];\\n\\n        ISuperToken superToken = topUp.superToken;\\n        IStrategy strategy = topUp.strategy;\\n\\n        if (!strategy.isSupportedSuperToken(superToken))\\n            revert UnsupportedSuperToken(address(superToken));\\n\\n        strategy.topUp(topUp.user, superToken, topUpAmount);\\n        emit PerformedTopUp(_index, topUpAmount);\\n    }\\n\\n    /// @dev IStrollManager.deleteTopUpByIndex implementation.\\n    function deleteTopUpByIndex(bytes32 _index) public {\\n        TopUp storage topUp = topUps[_index];\\n\\n        address user = topUp.user;\\n\\n        if (user != msg.sender && topUp.expiry >= block.timestamp)\\n            revert UnauthorizedCaller(msg.sender, user);\\n\\n        emit TopUpDeleted(\\n            _index,\\n            topUp.user,\\n            address(topUp.superToken),\\n            address(topUp.strategy),\\n            topUp.liquidityToken\\n        );\\n\\n        delete topUps[_index];\\n    }\\n\\n    /// @dev IStrollManager.getTopUpByIndex implementation.\\n    function getTopUpByIndex(bytes32 _index)\\n        public\\n        view\\n        returns (TopUp memory)\\n    {\\n        return topUps[_index];\\n    }\\n\\n    /// @dev IStrollManager.checkTopUpByIndex implementation.\\n    function checkTopUpByIndex(bytes32 _index)\\n        public\\n        view\\n        returns (uint256 _amount)\\n    {\\n        TopUp storage topUp = topUps[_index];\\n\\n        if (\\n            topUp.user == address(0) || // Task exists and has a valid user\\n            topUp.expiry <= block.timestamp || // Task exists and current time is before task end time\\n            IERC20Mod(topUp.liquidityToken).allowance(\\n                topUp.user,\\n                address(topUp.strategy) // contract is allowed to spend\\n            ) ==\\n            0 ||\\n            IERC20Mod(topUp.liquidityToken).balanceOf(topUp.user) == 0 || // check user balance\\n            !IStrategy(topUp.strategy).isSupportedSuperToken(topUp.superToken) // Supertoken isn't supported anymore.\\n        ) return 0;\\n\\n        int96 flowRate = CFA_V1.getNetFlow(topUp.superToken, topUp.user);\\n\\n        if (flowRate < 0) {\\n            uint256 superBalance = topUp.superToken.balanceOf(topUp.user);\\n            uint256 positiveFlowRate = uint256(uint96(-1 * flowRate));\\n\\n            // Selecting max between user defined limits and global limits.\\n            uint64 maxLowerLimit = (topUp.lowerLimit < minLower)? minLower: topUp.lowerLimit;\\n            uint64 maxUpperLimit = (topUp.upperLimit < minUpper)? minUpper: topUp.upperLimit;\\n\\n            if (superBalance <= (positiveFlowRate * maxLowerLimit)) {\\n                return positiveFlowRate * maxUpperLimit;\\n            }\\n        }\\n\\n        return 0;\\n    }\\n\\n    /// @dev IStrollManager.getTopUpIndex implementation.\\n    function getTopUpIndex(\\n        address _user,\\n        address _superToken,\\n        address _liquidityToken\\n    ) public pure returns (bytes32) {\\n        return keccak256(abi.encode(_user, _superToken, _liquidityToken));\\n    }\\n}\\n\",\"keccak256\":\"0x87c4e33914728e96c9eee5d5db7e642b0f692397c7eca01278ac8a8a39ba023f\",\"license\":\"Unlicense\"},\"contracts/interfaces/IERC20Mod.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\npragma solidity 0.8.13;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Mod is IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x0d0bc22b50e57aeb037b3572c521f7e1553c57d2407aa2de5fd3d80e7009c99e\",\"license\":\"Unlicensed\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.13;\\n\\nimport { ISuperToken } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\";\\n\\ninterface IStrategy {\\n    event TopUp(\\n        address indexed user,\\n        address indexed superToken,\\n        uint256 superTokenAmount\\n    );\\n    event StrollManagerChanged(\\n        address indexed oldStrollManager,\\n        address indexed strollManager\\n    );\\n    event EmergencyWithdrawInitiated(\\n        address indexed receiver,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    /// Custom error to indicate that null address has been passed.\\n    error ZeroAddress();\\n\\n    /// Custom error to indicate that supertoken provided isn't supported.\\n    /// @param superToken Address of the supertoken which isn't supported.\\n    error UnsupportedSuperToken(address superToken);\\n\\n    /// Custom error to indicate that the caller is unauthorized to call a function.\\n    /// @param caller Address of the caller of the function.\\n    /// @param expectedCaller Address of the expected caller of the function.\\n    error UnauthorizedCaller(address caller, address expectedCaller);\\n\\n    /// Function to get the current StrollManager contract which interacts with the-\\n    /// strategy contract.\\n    /// @return StrollManager contract address.\\n    function strollManager() external returns (address);\\n\\n    /// Function to top-up an account based on certain conditions pre-defined in the StrollManager contract.\\n    /// @param _user Address of the user whose account needs to be topped-up.\\n    /// @param _superToken Supertoken which needs to be replenished.\\n    /// @param _superTokenAmount Amount of supertoken to be replenished.\\n    /// @dev This function assumes whatever given by StrollManager is correct. Therefore, all the necessary-\\n    /// checks such as if a top-up is required and if so how much amount needs to be topped up, do we have-\\n    /// enough allowance to perform a top-up and so on must be performed in StrollManager only.\\n    function topUp(\\n        address _user,\\n        ISuperToken _superToken,\\n        uint256 _superTokenAmount\\n    ) external;\\n\\n    /// Function to check whether a supertoken is supported by a strategy or not.\\n    /// @dev More specifically, this function checks whether the underlying token of the supertoken-\\n    /// is supported or not.\\n    /// @param _superToken Supertoken which needs to be checked for support.\\n    /// @return Boolean indicating the support of the supertoken.\\n    function isSupportedSuperToken(ISuperToken _superToken)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// Function to change the StrollManager contract that a strategy interacts with.\\n    /// This function can only be called by the owner of the strategy contract.\\n    /// @param _newStrollManager Address of the new StrollManager contract the strategy should interact with.\\n    function changeStrollManager(address _newStrollManager) external;\\n\\n    /// Function to withdraw any token locked in the contract in case of an emergency.\\n    /// Ideally, no tokens should ever be sent directly to the contract but in case it happens,\\n    /// this function can be used by the owner of the strategy contract to transfer all the locked tokens-\\n    /// to their address.\\n    /// @param _token Address of the locked token which is to be transferred to the owner address.\\n    function emergencyWithdraw(address _token) external;\\n}\\n\",\"keccak256\":\"0xb5b9b3fe4b5035464476ca6fc3dbb3c28b1e0b9a9a80f2ca50943d6b63821700\",\"license\":\"Unlicense\"},\"contracts/interfaces/IStrollManager.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.13;\\n\\nimport { ISuperToken } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\";\\nimport \\\"../interfaces/IStrategy.sol\\\";\\n\\ninterface IStrollManager {\\n    event TopUpCreated(\\n        bytes32 indexed id,\\n        address indexed user,\\n        address indexed superToken,\\n        address strategy,\\n        address liquidityToken,\\n        uint256 expiry,\\n        uint256 lowerLimit,\\n        uint256 upperLimit\\n    );\\n    event TopUpDeleted(\\n        bytes32 indexed id,\\n        address indexed user,\\n        address indexed superToken,\\n        address strategy,\\n        address liquidityToken\\n    );\\n    event PerformedTopUp(bytes32 indexed id, uint256 topUpAmount);\\n    event AddedApprovedStrategy(address indexed strategy);\\n    event RemovedApprovedStrategy(address indexed strategy);\\n    event LimitsChanged(uint64 lowerLimit, uint64 upperLimit);\\n\\n    /// Custom error to indicate that null address has been passed.\\n    error ZeroAddress();\\n\\n    /// Custom error to indicate addition/usage of invalid strategy.\\n    /// @param strategy Address of the strategy contract.\\n    error InvalidStrategy(address strategy);\\n\\n    /// Custom error to indicate top up is not required and the index id associated with that top-up.\\n    /// @param index Index id associated with the top up request.\\n    error TopUpNotRequired(bytes32 index);\\n\\n    /// Custom error to indicate that supertoken provided isn't supported.\\n    /// @param superToken Address of the supertoken which isn't supported.\\n    error UnsupportedSuperToken(address superToken);\\n\\n    /// Custom error to indicate caller of a function is unauthorized.\\n    /// @param caller Address of the caller of the function.\\n    /// @param expectedCaller Address of the expected caller.\\n    error UnauthorizedCaller(address caller, address expectedCaller);\\n\\n    /// Custom error to indicate expiration time given is invalid.\\n    /// @param expirationTimeGiven Time given as expiration time by a user.\\n    /// @param timeNow Current time (block.timestamp).\\n    error InvalidExpirationTime(uint64 expirationTimeGiven, uint256 timeNow);\\n\\n    /// Custom error to indicate the limits given by a user are insufficient.\\n    /// @param limitGiven Limit (upper/lower) given by the user.\\n    /// @param minLimit Minimum limit (upper/lower) expected.\\n    error InsufficientLimits(uint64 limitGiven, uint64 minLimit);\\n\\n    /// Custom error to indicate that the limits are wrong (lower limit >= upper limit).\\n    /// @param lowerLimit Limit (upper/lower) given by the user.\\n    /// @param upperLimit Minimum limit (upper/lower) expected.\\n    error WrongLimits(uint64 lowerLimit, uint64 upperLimit);\\n\\n    /**\\n     * @notice Struct representing a top-up.\\n     * @param user Address of the user who created the top-up.\\n     * @param superToken Supertoken which needs to be topped up for the user.\\n     * @param strategy Address of the strategy contract to be used for top-up.\\n     * @param liquidityToken Address of the token to be liquidated/used for conversion to supertoken and topping-up.\\n     * @param expiry Expiration time of the top-up request.\\n     * @param lowerLimit Minimum time necessary in order to trigger a top-up.\\n     * @param upperLimit Determines the amount of supertokens required in terms of time (ex: 1 week's worth, 2 days worth etc).\\n     */\\n    struct TopUp {\\n        address user;\\n        ISuperToken superToken;\\n        IStrategy strategy;\\n        address liquidityToken;\\n        uint64 expiry;\\n        uint64 lowerLimit;\\n        uint64 upperLimit;\\n    }\\n\\n    /**\\n     * @notice Adds a strategy to the list of approved strategies.\\n     * @param _strategy The address of strategy contract to add.\\n     */\\n    function addApprovedStrategy(address _strategy) external;\\n\\n    /**\\n     * @notice Removes a strategy from the list of approved strategies.\\n     * @param _strategy The address of strategy contract to remove.\\n     */\\n    function removeApprovedStrategy(address _strategy) external;\\n\\n    /**\\n     * @notice Sets the global limits for top-ups.\\n     * @param _lowerLimit Triggers top up if stream can't be continued for this amount of seconds.\\n     * @param _upperLimit Increase supertoken balance to continue stream for this amount of seconds.\\n     * @dev If the previous top-ups don't adhere to the current global limits, the global limits will be enforced.\\n     * i.e., max(global limit, user defined limit) is always taken.\\n     */\\n    function setLimits(uint64 _lowerLimit, uint64 _upperLimit) external;\\n\\n    /**\\n     *  @notice Creates a new top up task.\\n     *  @param _superToken The supertoken to monitor/top up.\\n     *  @param _strategy The strategy to use for top up.\\n     *  @param _liquidityToken The token used to convert to _superToken.\\n     *  @param _expiry Timestamp after which the top up is considered invalid.\\n     *  @param _lowerLimit Triggers top up if stream can't be continued for this amount of seconds.\\n     *  @param _upperLimit Increase supertoken balance to continue stream for this amount of seconds.\\n     */\\n    function createTopUp(\\n        address _superToken,\\n        address _strategy,\\n        address _liquidityToken,\\n        uint64 _expiry,\\n        uint64 _lowerLimit,\\n        uint64 _upperLimit\\n    ) external;\\n\\n    /**\\n     * @notice Gets the index of a top up.\\n     * @param _user The creator of top up.\\n     * @param _superToken The supertoken which is being monitored/top up.\\n     * @param _liquidityToken The token used to convert to _superToken.\\n     * @return The index of the top up.\\n     */\\n    function getTopUpIndex(\\n        address _user,\\n        address _superToken,\\n        address _liquidityToken\\n    ) external pure returns (bytes32);\\n\\n    /**\\n     * @notice Gets a top up by index.\\n     * @param _index Index of top up.\\n     * @return The top up.\\n     */\\n    function getTopUpByIndex(bytes32 _index)\\n        external\\n        view\\n        returns (TopUp memory);\\n\\n    /**\\n     * @notice Gets a top up by index.\\n     * @param _user The creator of top up.\\n     * @param _superToken The supertoken which is being monitored/top up.\\n     * @param _liquidityToken The token used to convert to _superToken.\\n     * @return The top up.\\n     */\\n    function getTopUp(\\n        address _user,\\n        address _superToken,\\n        address _liquidityToken\\n    ) external view returns (TopUp memory);\\n\\n    /**\\n     * @notice Checks if a top up is required by index.\\n     * @param _index Index of top up.\\n     * @return _amount The amount of supertoken to top up.\\n     */\\n    function checkTopUpByIndex(bytes32 _index)\\n        external\\n        view\\n        returns (uint256 _amount);\\n\\n    /**\\n     * @notice Checks if a top up is required.\\n     * @param _user The creator of top up.\\n     * @param _superToken The supertoken which is being monitored/top up.\\n     * @param _liquidityToken The token used to convert to _superToken.\\n     * @return _amount The amount of supertoken to top up.\\n     */\\n    function checkTopUp(\\n        address _user,\\n        address _superToken,\\n        address _liquidityToken\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Performs a top up by index.\\n     * @param _index Index of top up.\\n     */\\n    function performTopUpByIndex(bytes32 _index) external;\\n\\n    /**\\n     * @notice Performs a top up.\\n     * @param _user The user to top up.\\n     * @param _superToken The supertoken to monitor/top up.\\n     * @param _liquidityToken The token used to convert to _superToken.\\n     */\\n    function performTopUp(\\n        address _user,\\n        address _superToken,\\n        address _liquidityToken\\n    ) external;\\n\\n    /**\\n     * @notice Deletes a top up by index.\\n     * @param _index Index of top up.\\n     */\\n    function deleteTopUpByIndex(bytes32 _index) external;\\n\\n    /** @dev IStrollManager.deleteTopUp implementation.\\n     * @notice Deletes a top up.\\n     * @param _user The creator of top up.\\n     * @param _superToken The supertoken which is being monitored/top up.\\n     * @param _liquidityToken The token used to convert to _superToken.\\n     */\\n    function deleteTopUp(\\n        address _user,\\n        address _superToken,\\n        address _liquidityToken\\n    ) external;\\n\\n    /**  @dev IStrollManager.deleteBatch implementation.\\n     * @notice Deletes a batch of top ups.\\n     * @param _indices Array of indices of top ups to delete.\\n     */\\n    function deleteBatch(bytes32[] calldata _indices) external;\\n\\n    /**\\n     * @notice Gets the minimum time for _lowerLimit\\n     */\\n    function minLower() external view returns (uint64);\\n\\n    /**\\n     * @notice Gets the minimum time for _upperLimit\\n     */\\n    function minUpper() external view returns (uint64);\\n\\n    /**\\n     * @notice Gets the list of approved strategies.\\n     */\\n    function approvedStrategies(address _strategy) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf51f828511917c8e50d906fcf71326252c12cf1b2ccf693430bd49d249a8e4b5\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620031ea380380620031ea833981810160405281019062000037919062000325565b620000576200004b620001aa60201b60201c565b620001b260201b60201c565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603620000be576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8067ffffffffffffffff168267ffffffffffffffff16106200011b5781816040517fe52779850000000000000000000000000000000000000000000000000000000081526004016200011292919062000392565b60405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505081600060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050620003bf565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002a8826200027b565b9050919050565b620002ba816200029b565b8114620002c657600080fd5b50565b600081519050620002da81620002af565b92915050565b600067ffffffffffffffff82169050919050565b620002ff81620002e0565b81146200030b57600080fd5b50565b6000815190506200031f81620002f4565b92915050565b60008060006060848603121562000341576200034062000276565b5b60006200035186828701620002c9565b935050602062000364868287016200030e565b925050604062000377868287016200030e565b9150509250925092565b6200038c81620002e0565b82525050565b6000604082019050620003a9600083018562000381565b620003b8602083018462000381565b9392505050565b608051612e08620003e260003960008181610b8e015261157a0152612e086000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80638b80f351116100b8578063a7052e6b1161007c578063a7052e6b14610324578063c613aec014610342578063f11665c914610372578063f2556da9146103a2578063f29730cf146103be578063f2fde38b146103da57610137565b80638b80f3511461026e5780638bc6a9411461029e5780638da5cb5b146102ba578063947dd645146102d85780639aed5c51146102f457610137565b806359b830be116100ff57806359b830be146101ca578063715018a6146101e857806377a80e47146101f2578063854ba6d01461022257806388882af21461023e57610137565b80633aa4e5901461013c5780633db29ed8146101585780633f34c5141461017657806347cda691146101925780634e0e623d146101ae575b600080fd5b6101566004803603810190610151919061232f565b6103f6565b005b610160610b8c565b60405161016d919061241b565b60405180910390f35b610190600480360381019061018b9190612436565b610bb0565b005b6101ac60048036038101906101a791906124db565b610d15565b005b6101c860048036038101906101c39190612528565b610d61565b005b6101d2610f3e565b6040516101df9190612564565b60405180910390f35b6101f0610f58565b005b61020c6004803603810190610207919061257f565b610fe0565b60405161021991906125eb565b60405180910390f35b61023c6004803603810190610237919061263c565b610ffe565b005b6102586004803603810190610253919061263c565b611246565b60405161026591906125eb565b60405180910390f35b6102886004803603810190610283919061257f565b6118c3565b6040516102959190612757565b60405180910390f35b6102b860048036038101906102b39190612528565b6118e7565b005b6102c2611a4b565b6040516102cf9190612781565b60405180910390f35b6102f260048036038101906102ed919061263c565b611a74565b005b61030e6004803603810190610309919061263c565b611d56565b60405161031b9190612757565b60405180910390f35b61032c611f71565b6040516103399190612564565b60405180910390f35b61035c60048036038101906103579190612528565b611f8b565b60405161036991906127b7565b60405180910390f35b61038c6004803603810190610387919061257f565b611fab565b60405161039991906127e1565b60405180910390f35b6103bc60048036038101906103b7919061257f565b611fe1565b005b6103d860048036038101906103d3919061257f565b611ff9565b005b6103f460048036038101906103ef9190612528565b612011565b005b428367ffffffffffffffff16116104465782426040517fa81e80eb00000000000000000000000000000000000000000000000000000000815260040161043d9291906127fc565b60405180910390fd5b600060149054906101000a900467ffffffffffffffff1667ffffffffffffffff168267ffffffffffffffff1610156104cd5781600060149054906101000a900467ffffffffffffffff166040517f367e59f90000000000000000000000000000000000000000000000000000000081526004016104c4929190612825565b60405180910390fd5b600160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1610156105545780600160009054906101000a900467ffffffffffffffff166040517f367e59f900000000000000000000000000000000000000000000000000000000815260040161054b929190612825565b60405180910390fd5b6000610561338887611fab565b90503373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a5d57600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614806106335750600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b8061066a5750600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b156106a1576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661072f57856040517feb894b340000000000000000000000000000000000000000000000000000000081526004016107269190612781565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663fc888cb0886040518263ffffffff1660e01b8152600401610768919061285d565b602060405180830381865afa158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a991906128a4565b6107ea57866040517f1d5f93fb0000000000000000000000000000000000000000000000000000000081526004016107e19190612781565b60405180910390fd5b60006040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018667ffffffffffffffff1681526020018567ffffffffffffffff1681526020018467ffffffffffffffff168152509050806003600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160040160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060c08201518160040160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555090505050610b15565b836003600083815260200190815260200160002060030160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550826003600083815260200190815260200160002060040160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816003600083815260200190815260200160002060040160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b8673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16827f160bcdb242b6b3400162d90511ed5912a4a4f906a00a80e523c1bb10867e428a8989898989604051610b7b959493929190612902565b60405180910390a450505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610bb8612108565b73ffffffffffffffffffffffffffffffffffffffff16610bd6611a4b565b73ffffffffffffffffffffffffffffffffffffffff1614610c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c23906129b2565b60405180910390fd5b8067ffffffffffffffff168267ffffffffffffffff1610610c865781816040517fe5277985000000000000000000000000000000000000000000000000000000008152600401610c7d929190612825565b60405180910390fd5b81600060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fcdbc762ccbd384cdee07c2d0ac57883fa6bb2cd308895ed4417a0526c6baea0c8282604051610d09929190612825565b60405180910390a15050565b600082829050905060005b81811015610d5b57610d4a848483818110610d3e57610d3d6129d2565b5b90506020020135611a74565b80610d5490612a30565b9050610d20565b50505050565b610d69612108565b73ffffffffffffffffffffffffffffffffffffffff16610d87611a4b565b73ffffffffffffffffffffffffffffffffffffffff1614610ddd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd4906129b2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e4e57806040517feb894b34000000000000000000000000000000000000000000000000000000008152600401610e459190612781565b60405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610f3b576001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f3edff2b723512b7e98f0fb394d84a670f3a40eb2f2c51e9c00c58a3f04e1e4dd60405160405180910390a25b50565b600160009054906101000a900467ffffffffffffffff1681565b610f60612108565b73ffffffffffffffffffffffffffffffffffffffff16610f7e611a4b565b73ffffffffffffffffffffffffffffffffffffffff1614610fd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcb906129b2565b60405180910390fd5b610fde6000612110565b565b6000610ff5610ff0858585611fab565b611246565b90509392505050565b600061100982611246565b90506000810361105057816040517fc160da3f00000000000000000000000000000000000000000000000000000000815260040161104791906127e1565b60405180910390fd5b600060036000848152602001908152602001600020905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663fc888cb0836040518263ffffffff1660e01b81526004016110f2919061285d565b602060405180830381865afa15801561110f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113391906128a4565b61117457816040517f1d5f93fb00000000000000000000000000000000000000000000000000000000815260040161116b9190612781565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663699018588460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684876040518463ffffffff1660e01b81526004016111d593929190612a78565b600060405180830381600087803b1580156111ef57600080fd5b505af1158015611203573d6000803e3d6000fd5b50505050847fd9ed57b29272093f04d5d1de3484d5ef3819413dcccbfe2d364ead6ab58d4df68560405161123791906125eb565b60405180910390a25050505050565b600080600360008481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806112df5750428160030160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1611155b806113d1575060008160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b815260040161138e929190612aaf565b602060405180830381865afa1580156113ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cf9190612b04565b145b8061149d575060008160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161145a9190612781565b602060405180830381865afa158015611477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149b9190612b04565b145b8061156757508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc888cb08260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401611524919061285d565b602060405180830381865afa158015611541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156591906128a4565b155b156115765760009150506118be565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e8e7e2d18360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b815260040161161b929190612b31565b602060405180830381865afa158015611638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165c9190612b93565b9050600081600b0b12156118b75760008260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016116ed9190612781565b602060405180830381865afa15801561170a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172e9190612b04565b90506000827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61175e9190612bc0565b6bffffffffffffffffffffffff16905060008060149054906101000a900467ffffffffffffffff1667ffffffffffffffff168560040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16106117d6578460040160009054906101000a900467ffffffffffffffff166117ee565b600060149054906101000a900467ffffffffffffffff165b90506000600160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168660040160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1610611859578560040160089054906101000a900467ffffffffffffffff16611871565b600160009054906101000a900467ffffffffffffffff165b90508167ffffffffffffffff16836118899190612caf565b84116118b2578067ffffffffffffffff16836118a59190612caf565b96505050505050506118be565b505050505b6000925050505b919050565b6118cb6121d4565b6118de6118d9858585611fab565b611d56565b90509392505050565b6118ef612108565b73ffffffffffffffffffffffffffffffffffffffff1661190d611a4b565b73ffffffffffffffffffffffffffffffffffffffff1614611963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195a906129b2565b60405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611a4857600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558073ffffffffffffffffffffffffffffffffffffffff167fcccfdaf06e384e4afcea4acf18f915e4cf10ccbebf3bd41dbdbf360388fa613860405160405180910390a25b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060036000838152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015611b125750428260030160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1610155b15611b565733816040517f536dd9ef000000000000000000000000000000000000000000000000000000008152600401611b4d929190612aaf565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847f435d6aa02bc57be393afe57c6498e59391018bbf9f6be723d2f94a0e0328ae4b8560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051611c46929190612aaf565b60405180910390a460036000848152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160146101000a81549067ffffffffffffffff02191690556004820160006101000a81549067ffffffffffffffff02191690556004820160086101000a81549067ffffffffffffffff02191690555050505050565b611d5e6121d4565b600360008381526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016004820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016004820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050919050565b600060149054906101000a900467ffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900460ff1681565b6000838383604051602001611fc293929190612d09565b6040516020818303038152906040528051906020012090509392505050565b611ff4611fef848484611fab565b611a74565b505050565b61200c612007848484611fab565b610ffe565b505050565b612019612108565b73ffffffffffffffffffffffffffffffffffffffff16612037611a4b565b73ffffffffffffffffffffffffffffffffffffffff161461208d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612084906129b2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f390612db2565b60405180910390fd5b61210581612110565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122bc82612291565b9050919050565b6122cc816122b1565b81146122d757600080fd5b50565b6000813590506122e9816122c3565b92915050565b600067ffffffffffffffff82169050919050565b61230c816122ef565b811461231757600080fd5b50565b60008135905061232981612303565b92915050565b60008060008060008060c0878903121561234c5761234b612287565b5b600061235a89828a016122da565b965050602061236b89828a016122da565b955050604061237c89828a016122da565b945050606061238d89828a0161231a565b935050608061239e89828a0161231a565b92505060a06123af89828a0161231a565b9150509295509295509295565b6000819050919050565b60006123e16123dc6123d784612291565b6123bc565b612291565b9050919050565b60006123f3826123c6565b9050919050565b6000612405826123e8565b9050919050565b612415816123fa565b82525050565b6000602082019050612430600083018461240c565b92915050565b6000806040838503121561244d5761244c612287565b5b600061245b8582860161231a565b925050602061246c8582860161231a565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f84011261249b5761249a612476565b5b8235905067ffffffffffffffff8111156124b8576124b761247b565b5b6020830191508360208202830111156124d4576124d3612480565b5b9250929050565b600080602083850312156124f2576124f1612287565b5b600083013567ffffffffffffffff8111156125105761250f61228c565b5b61251c85828601612485565b92509250509250929050565b60006020828403121561253e5761253d612287565b5b600061254c848285016122da565b91505092915050565b61255e816122ef565b82525050565b60006020820190506125796000830184612555565b92915050565b60008060006060848603121561259857612597612287565b5b60006125a6868287016122da565b93505060206125b7868287016122da565b92505060406125c8868287016122da565b9150509250925092565b6000819050919050565b6125e5816125d2565b82525050565b600060208201905061260060008301846125dc565b92915050565b6000819050919050565b61261981612606565b811461262457600080fd5b50565b60008135905061263681612610565b92915050565b60006020828403121561265257612651612287565b5b600061266084828501612627565b91505092915050565b612672816122b1565b82525050565b6000612683826123e8565b9050919050565b61269381612678565b82525050565b60006126a4826123e8565b9050919050565b6126b481612699565b82525050565b6126c3816122ef565b82525050565b60e0820160008201516126df6000850182612669565b5060208201516126f2602085018261268a565b50604082015161270560408501826126ab565b5060608201516127186060850182612669565b50608082015161272b60808501826126ba565b5060a082015161273e60a08501826126ba565b5060c082015161275160c08501826126ba565b50505050565b600060e08201905061276c60008301846126c9565b92915050565b61277b816122b1565b82525050565b60006020820190506127966000830184612772565b92915050565b60008115159050919050565b6127b18161279c565b82525050565b60006020820190506127cc60008301846127a8565b92915050565b6127db81612606565b82525050565b60006020820190506127f660008301846127d2565b92915050565b60006040820190506128116000830185612555565b61281e60208301846125dc565b9392505050565b600060408201905061283a6000830185612555565b6128476020830184612555565b9392505050565b61285781612678565b82525050565b6000602082019050612872600083018461284e565b92915050565b6128818161279c565b811461288c57600080fd5b50565b60008151905061289e81612878565b92915050565b6000602082840312156128ba576128b9612287565b5b60006128c88482850161288f565b91505092915050565b60006128ec6128e76128e2846122ef565b6123bc565b6125d2565b9050919050565b6128fc816128d1565b82525050565b600060a0820190506129176000830188612772565b6129246020830187612772565b61293160408301866128f3565b61293e60608301856128f3565b61294b60808301846128f3565b9695505050505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061299c602083612955565b91506129a782612966565b602082019050919050565b600060208201905081810360008301526129cb8161298f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a3b826125d2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a6d57612a6c612a01565b5b600182019050919050565b6000606082019050612a8d6000830186612772565b612a9a602083018561284e565b612aa760408301846125dc565b949350505050565b6000604082019050612ac46000830185612772565b612ad16020830184612772565b9392505050565b612ae1816125d2565b8114612aec57600080fd5b50565b600081519050612afe81612ad8565b92915050565b600060208284031215612b1a57612b19612287565b5b6000612b2884828501612aef565b91505092915050565b6000604082019050612b46600083018561284e565b612b536020830184612772565b9392505050565b600081600b0b9050919050565b612b7081612b5a565b8114612b7b57600080fd5b50565b600081519050612b8d81612b67565b92915050565b600060208284031215612ba957612ba8612287565b5b6000612bb784828501612b7e565b91505092915050565b6000612bcb82612b5a565b9150612bd683612b5a565b9250826b7fffffffffffffffffffffff0482116000841360008413161615612c0157612c00612a01565b5b817fffffffffffffffffffffffffffffffffffffffff8000000000000000000000000583126000841260008413161615612c3e57612c3d612a01565b5b827fffffffffffffffffffffffffffffffffffffffff8000000000000000000000000582126000841360008412161615612c7b57612c7a612a01565b5b826b7fffffffffffffffffffffff0582126000841260008412161615612ca457612ca3612a01565b5b828202905092915050565b6000612cba826125d2565b9150612cc5836125d2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cfe57612cfd612a01565b5b828202905092915050565b6000606082019050612d1e6000830186612772565b612d2b6020830185612772565b612d386040830184612772565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d9c602683612955565b9150612da782612d40565b604082019050919050565b60006020820190508181036000830152612dcb81612d8f565b905091905056fea264697066735822122069eff5baf3d151e17f8d11225e8b854b39047c6225b908e57f59a95acd1df93b64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80638b80f351116100b8578063a7052e6b1161007c578063a7052e6b14610324578063c613aec014610342578063f11665c914610372578063f2556da9146103a2578063f29730cf146103be578063f2fde38b146103da57610137565b80638b80f3511461026e5780638bc6a9411461029e5780638da5cb5b146102ba578063947dd645146102d85780639aed5c51146102f457610137565b806359b830be116100ff57806359b830be146101ca578063715018a6146101e857806377a80e47146101f2578063854ba6d01461022257806388882af21461023e57610137565b80633aa4e5901461013c5780633db29ed8146101585780633f34c5141461017657806347cda691146101925780634e0e623d146101ae575b600080fd5b6101566004803603810190610151919061232f565b6103f6565b005b610160610b8c565b60405161016d919061241b565b60405180910390f35b610190600480360381019061018b9190612436565b610bb0565b005b6101ac60048036038101906101a791906124db565b610d15565b005b6101c860048036038101906101c39190612528565b610d61565b005b6101d2610f3e565b6040516101df9190612564565b60405180910390f35b6101f0610f58565b005b61020c6004803603810190610207919061257f565b610fe0565b60405161021991906125eb565b60405180910390f35b61023c6004803603810190610237919061263c565b610ffe565b005b6102586004803603810190610253919061263c565b611246565b60405161026591906125eb565b60405180910390f35b6102886004803603810190610283919061257f565b6118c3565b6040516102959190612757565b60405180910390f35b6102b860048036038101906102b39190612528565b6118e7565b005b6102c2611a4b565b6040516102cf9190612781565b60405180910390f35b6102f260048036038101906102ed919061263c565b611a74565b005b61030e6004803603810190610309919061263c565b611d56565b60405161031b9190612757565b60405180910390f35b61032c611f71565b6040516103399190612564565b60405180910390f35b61035c60048036038101906103579190612528565b611f8b565b60405161036991906127b7565b60405180910390f35b61038c6004803603810190610387919061257f565b611fab565b60405161039991906127e1565b60405180910390f35b6103bc60048036038101906103b7919061257f565b611fe1565b005b6103d860048036038101906103d3919061257f565b611ff9565b005b6103f460048036038101906103ef9190612528565b612011565b005b428367ffffffffffffffff16116104465782426040517fa81e80eb00000000000000000000000000000000000000000000000000000000815260040161043d9291906127fc565b60405180910390fd5b600060149054906101000a900467ffffffffffffffff1667ffffffffffffffff168267ffffffffffffffff1610156104cd5781600060149054906101000a900467ffffffffffffffff166040517f367e59f90000000000000000000000000000000000000000000000000000000081526004016104c4929190612825565b60405180910390fd5b600160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168167ffffffffffffffff1610156105545780600160009054906101000a900467ffffffffffffffff166040517f367e59f900000000000000000000000000000000000000000000000000000000815260040161054b929190612825565b60405180910390fd5b6000610561338887611fab565b90503373ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a5d57600073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614806106335750600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16145b8061066a5750600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16145b156106a1576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661072f57856040517feb894b340000000000000000000000000000000000000000000000000000000081526004016107269190612781565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663fc888cb0886040518263ffffffff1660e01b8152600401610768919061285d565b602060405180830381865afa158015610785573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a991906128a4565b6107ea57866040517f1d5f93fb0000000000000000000000000000000000000000000000000000000081526004016107e19190612781565b60405180910390fd5b60006040518060e001604052803373ffffffffffffffffffffffffffffffffffffffff1681526020018973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018667ffffffffffffffff1681526020018567ffffffffffffffff1681526020018467ffffffffffffffff168152509050806003600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160030160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060a08201518160040160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060c08201518160040160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555090505050610b15565b836003600083815260200190815260200160002060030160146101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550826003600083815260200190815260200160002060040160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550816003600083815260200190815260200160002060040160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055505b8673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16827f160bcdb242b6b3400162d90511ed5912a4a4f906a00a80e523c1bb10867e428a8989898989604051610b7b959493929190612902565b60405180910390a450505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b610bb8612108565b73ffffffffffffffffffffffffffffffffffffffff16610bd6611a4b565b73ffffffffffffffffffffffffffffffffffffffff1614610c2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c23906129b2565b60405180910390fd5b8067ffffffffffffffff168267ffffffffffffffff1610610c865781816040517fe5277985000000000000000000000000000000000000000000000000000000008152600401610c7d929190612825565b60405180910390fd5b81600060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555080600160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fcdbc762ccbd384cdee07c2d0ac57883fa6bb2cd308895ed4417a0526c6baea0c8282604051610d09929190612825565b60405180910390a15050565b600082829050905060005b81811015610d5b57610d4a848483818110610d3e57610d3d6129d2565b5b90506020020135611a74565b80610d5490612a30565b9050610d20565b50505050565b610d69612108565b73ffffffffffffffffffffffffffffffffffffffff16610d87611a4b565b73ffffffffffffffffffffffffffffffffffffffff1614610ddd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd4906129b2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e4e57806040517feb894b34000000000000000000000000000000000000000000000000000000008152600401610e459190612781565b60405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610f3b576001600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508073ffffffffffffffffffffffffffffffffffffffff167f3edff2b723512b7e98f0fb394d84a670f3a40eb2f2c51e9c00c58a3f04e1e4dd60405160405180910390a25b50565b600160009054906101000a900467ffffffffffffffff1681565b610f60612108565b73ffffffffffffffffffffffffffffffffffffffff16610f7e611a4b565b73ffffffffffffffffffffffffffffffffffffffff1614610fd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fcb906129b2565b60405180910390fd5b610fde6000612110565b565b6000610ff5610ff0858585611fab565b611246565b90509392505050565b600061100982611246565b90506000810361105057816040517fc160da3f00000000000000000000000000000000000000000000000000000000815260040161104791906127e1565b60405180910390fd5b600060036000848152602001908152602001600020905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008260020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663fc888cb0836040518263ffffffff1660e01b81526004016110f2919061285d565b602060405180830381865afa15801561110f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061113391906128a4565b61117457816040517f1d5f93fb00000000000000000000000000000000000000000000000000000000815260040161116b9190612781565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663699018588460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684876040518463ffffffff1660e01b81526004016111d593929190612a78565b600060405180830381600087803b1580156111ef57600080fd5b505af1158015611203573d6000803e3d6000fd5b50505050847fd9ed57b29272093f04d5d1de3484d5ef3819413dcccbfe2d364ead6ab58d4df68560405161123791906125eb565b60405180910390a25050505050565b600080600360008481526020019081526020016000209050600073ffffffffffffffffffffffffffffffffffffffff168160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806112df5750428160030160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1611155b806113d1575060008160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e8360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b815260040161138e929190612aaf565b602060405180830381865afa1580156113ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cf9190612b04565b145b8061149d575060008160030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318360000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b815260040161145a9190612781565b602060405180830381865afa158015611477573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149b9190612b04565b145b8061156757508060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fc888cb08260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401611524919061285d565b602060405180830381865afa158015611541573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061156591906128a4565b155b156115765760009150506118be565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663e8e7e2d18360010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518363ffffffff1660e01b815260040161161b929190612b31565b602060405180830381865afa158015611638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165c9190612b93565b9050600081600b0b12156118b75760008260010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a082318460000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b81526004016116ed9190612781565b602060405180830381865afa15801561170a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172e9190612b04565b90506000827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61175e9190612bc0565b6bffffffffffffffffffffffff16905060008060149054906101000a900467ffffffffffffffff1667ffffffffffffffff168560040160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16106117d6578460040160009054906101000a900467ffffffffffffffff166117ee565b600060149054906101000a900467ffffffffffffffff165b90506000600160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168660040160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1610611859578560040160089054906101000a900467ffffffffffffffff16611871565b600160009054906101000a900467ffffffffffffffff165b90508167ffffffffffffffff16836118899190612caf565b84116118b2578067ffffffffffffffff16836118a59190612caf565b96505050505050506118be565b505050505b6000925050505b919050565b6118cb6121d4565b6118de6118d9858585611fab565b611d56565b90509392505050565b6118ef612108565b73ffffffffffffffffffffffffffffffffffffffff1661190d611a4b565b73ffffffffffffffffffffffffffffffffffffffff1614611963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195a906129b2565b60405180910390fd5b600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611a4857600260008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81549060ff02191690558073ffffffffffffffffffffffffffffffffffffffff167fcccfdaf06e384e4afcea4acf18f915e4cf10ccbebf3bd41dbdbf360388fa613860405160405180910390a25b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060036000838152602001908152602001600020905060008160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614158015611b125750428260030160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1610155b15611b565733816040517f536dd9ef000000000000000000000000000000000000000000000000000000008152600401611b4d929190612aaf565b60405180910390fd5b8160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16847f435d6aa02bc57be393afe57c6498e59391018bbf9f6be723d2f94a0e0328ae4b8560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168660030160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051611c46929190612aaf565b60405180910390a460036000848152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556002820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556003820160146101000a81549067ffffffffffffffff02191690556004820160006101000a81549067ffffffffffffffff02191690556004820160086101000a81549067ffffffffffffffff02191690555050505050565b611d5e6121d4565b600360008381526020019081526020016000206040518060e00160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016003820160149054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016004820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016004820160089054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050919050565b600060149054906101000a900467ffffffffffffffff1681565b60026020528060005260406000206000915054906101000a900460ff1681565b6000838383604051602001611fc293929190612d09565b6040516020818303038152906040528051906020012090509392505050565b611ff4611fef848484611fab565b611a74565b505050565b61200c612007848484611fab565b610ffe565b505050565b612019612108565b73ffffffffffffffffffffffffffffffffffffffff16612037611a4b565b73ffffffffffffffffffffffffffffffffffffffff161461208d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612084906129b2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036120fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f390612db2565b60405180910390fd5b61210581612110565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006122bc82612291565b9050919050565b6122cc816122b1565b81146122d757600080fd5b50565b6000813590506122e9816122c3565b92915050565b600067ffffffffffffffff82169050919050565b61230c816122ef565b811461231757600080fd5b50565b60008135905061232981612303565b92915050565b60008060008060008060c0878903121561234c5761234b612287565b5b600061235a89828a016122da565b965050602061236b89828a016122da565b955050604061237c89828a016122da565b945050606061238d89828a0161231a565b935050608061239e89828a0161231a565b92505060a06123af89828a0161231a565b9150509295509295509295565b6000819050919050565b60006123e16123dc6123d784612291565b6123bc565b612291565b9050919050565b60006123f3826123c6565b9050919050565b6000612405826123e8565b9050919050565b612415816123fa565b82525050565b6000602082019050612430600083018461240c565b92915050565b6000806040838503121561244d5761244c612287565b5b600061245b8582860161231a565b925050602061246c8582860161231a565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f84011261249b5761249a612476565b5b8235905067ffffffffffffffff8111156124b8576124b761247b565b5b6020830191508360208202830111156124d4576124d3612480565b5b9250929050565b600080602083850312156124f2576124f1612287565b5b600083013567ffffffffffffffff8111156125105761250f61228c565b5b61251c85828601612485565b92509250509250929050565b60006020828403121561253e5761253d612287565b5b600061254c848285016122da565b91505092915050565b61255e816122ef565b82525050565b60006020820190506125796000830184612555565b92915050565b60008060006060848603121561259857612597612287565b5b60006125a6868287016122da565b93505060206125b7868287016122da565b92505060406125c8868287016122da565b9150509250925092565b6000819050919050565b6125e5816125d2565b82525050565b600060208201905061260060008301846125dc565b92915050565b6000819050919050565b61261981612606565b811461262457600080fd5b50565b60008135905061263681612610565b92915050565b60006020828403121561265257612651612287565b5b600061266084828501612627565b91505092915050565b612672816122b1565b82525050565b6000612683826123e8565b9050919050565b61269381612678565b82525050565b60006126a4826123e8565b9050919050565b6126b481612699565b82525050565b6126c3816122ef565b82525050565b60e0820160008201516126df6000850182612669565b5060208201516126f2602085018261268a565b50604082015161270560408501826126ab565b5060608201516127186060850182612669565b50608082015161272b60808501826126ba565b5060a082015161273e60a08501826126ba565b5060c082015161275160c08501826126ba565b50505050565b600060e08201905061276c60008301846126c9565b92915050565b61277b816122b1565b82525050565b60006020820190506127966000830184612772565b92915050565b60008115159050919050565b6127b18161279c565b82525050565b60006020820190506127cc60008301846127a8565b92915050565b6127db81612606565b82525050565b60006020820190506127f660008301846127d2565b92915050565b60006040820190506128116000830185612555565b61281e60208301846125dc565b9392505050565b600060408201905061283a6000830185612555565b6128476020830184612555565b9392505050565b61285781612678565b82525050565b6000602082019050612872600083018461284e565b92915050565b6128818161279c565b811461288c57600080fd5b50565b60008151905061289e81612878565b92915050565b6000602082840312156128ba576128b9612287565b5b60006128c88482850161288f565b91505092915050565b60006128ec6128e76128e2846122ef565b6123bc565b6125d2565b9050919050565b6128fc816128d1565b82525050565b600060a0820190506129176000830188612772565b6129246020830187612772565b61293160408301866128f3565b61293e60608301856128f3565b61294b60808301846128f3565b9695505050505050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061299c602083612955565b91506129a782612966565b602082019050919050565b600060208201905081810360008301526129cb8161298f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a3b826125d2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a6d57612a6c612a01565b5b600182019050919050565b6000606082019050612a8d6000830186612772565b612a9a602083018561284e565b612aa760408301846125dc565b949350505050565b6000604082019050612ac46000830185612772565b612ad16020830184612772565b9392505050565b612ae1816125d2565b8114612aec57600080fd5b50565b600081519050612afe81612ad8565b92915050565b600060208284031215612b1a57612b19612287565b5b6000612b2884828501612aef565b91505092915050565b6000604082019050612b46600083018561284e565b612b536020830184612772565b9392505050565b600081600b0b9050919050565b612b7081612b5a565b8114612b7b57600080fd5b50565b600081519050612b8d81612b67565b92915050565b600060208284031215612ba957612ba8612287565b5b6000612bb784828501612b7e565b91505092915050565b6000612bcb82612b5a565b9150612bd683612b5a565b9250826b7fffffffffffffffffffffff0482116000841360008413161615612c0157612c00612a01565b5b817fffffffffffffffffffffffffffffffffffffffff8000000000000000000000000583126000841260008413161615612c3e57612c3d612a01565b5b827fffffffffffffffffffffffffffffffffffffffff8000000000000000000000000582126000841360008412161615612c7b57612c7a612a01565b5b826b7fffffffffffffffffffffff0582126000841260008412161615612ca457612ca3612a01565b5b828202905092915050565b6000612cba826125d2565b9150612cc5836125d2565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612cfe57612cfd612a01565b5b828202905092915050565b6000606082019050612d1e6000830186612772565b612d2b6020830185612772565b612d386040830184612772565b949350505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612d9c602683612955565b9150612da782612d40565b604082019050919050565b60006020820190508181036000830152612dcb81612d8f565b905091905056fea264697066735822122069eff5baf3d151e17f8d11225e8b854b39047c6225b908e57f59a95acd1df93b64736f6c634300080d0033",
  "devdoc": {
    "author": "Harsh Prakash <0xharsh@proton.me>",
    "errors": {
      "InsufficientLimits(uint64,uint64)": [
        {
          "params": {
            "limitGiven": "Limit (upper/lower) given by the user.",
            "minLimit": "Minimum limit (upper/lower) expected."
          }
        }
      ],
      "InvalidExpirationTime(uint64,uint256)": [
        {
          "params": {
            "expirationTimeGiven": "Time given as expiration time by a user.",
            "timeNow": "Current time (block.timestamp)."
          }
        }
      ],
      "InvalidStrategy(address)": [
        {
          "params": {
            "strategy": "Address of the strategy contract."
          }
        }
      ],
      "TopUpNotRequired(bytes32)": [
        {
          "params": {
            "index": "Index id associated with the top up request."
          }
        }
      ],
      "UnauthorizedCaller(address,address)": [
        {
          "params": {
            "caller": "Address of the caller of the function.",
            "expectedCaller": "Address of the expected caller."
          }
        }
      ],
      "UnsupportedSuperToken(address)": [
        {
          "params": {
            "superToken": "Address of the supertoken which isn't supported."
          }
        }
      ],
      "WrongLimits(uint64,uint64)": [
        {
          "params": {
            "lowerLimit": "Limit (upper/lower) given by the user.",
            "upperLimit": "Minimum limit (upper/lower) expected."
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addApprovedStrategy(address)": {
        "details": "IStrollManager.addApprovedStrategy implementation."
      },
      "checkTopUp(address,address,address)": {
        "details": "IStrollManager.checkTopUp implementation."
      },
      "checkTopUpByIndex(bytes32)": {
        "details": "IStrollManager.checkTopUpByIndex implementation."
      },
      "createTopUp(address,address,address,uint64,uint64,uint64)": {
        "details": "IStrollManager.createTopUp implementation."
      },
      "deleteBatch(bytes32[])": {
        "details": "IStrollManager.deleteBatch implementation."
      },
      "deleteTopUp(address,address,address)": {
        "details": "IStrollManager.deleteTopUp implementation."
      },
      "deleteTopUpByIndex(bytes32)": {
        "details": "IStrollManager.deleteTopUpByIndex implementation."
      },
      "getTopUp(address,address,address)": {
        "details": "IStrollManager.getTopUp implementation."
      },
      "getTopUpByIndex(bytes32)": {
        "details": "IStrollManager.getTopUpByIndex implementation."
      },
      "getTopUpIndex(address,address,address)": {
        "details": "IStrollManager.getTopUpIndex implementation."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performTopUp(address,address,address)": {
        "details": "IStrollManager.performTopUp implementation."
      },
      "performTopUpByIndex(bytes32)": {
        "details": "IStrollManager.performTopUpByIndex implementation."
      },
      "removeApprovedStrategy(address)": {
        "details": "IStrollManager.removeApprovedStrategy implementation."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setLimits(uint64,uint64)": {
        "details": "IStrollManager.setLimits implementation."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "approvedStrategies": {
        "details": "IStrollManager.approvedStrategies implementation."
      },
      "minLower": {
        "details": "IStrollManager.minLower implementation."
      },
      "minUpper": {
        "details": "IStrollManager.minUpper implementation."
      }
    },
    "title": "StrollManager",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "InsufficientLimits(uint64,uint64)": [
        {
          "notice": "Custom error to indicate the limits given by a user are insufficient."
        }
      ],
      "InvalidExpirationTime(uint64,uint256)": [
        {
          "notice": "Custom error to indicate expiration time given is invalid."
        }
      ],
      "InvalidStrategy(address)": [
        {
          "notice": "Custom error to indicate addition/usage of invalid strategy."
        }
      ],
      "TopUpNotRequired(bytes32)": [
        {
          "notice": "Custom error to indicate top up is not required and the index id associated with that top-up."
        }
      ],
      "UnauthorizedCaller(address,address)": [
        {
          "notice": "Custom error to indicate caller of a function is unauthorized."
        }
      ],
      "UnsupportedSuperToken(address)": [
        {
          "notice": "Custom error to indicate that supertoken provided isn't supported."
        }
      ],
      "WrongLimits(uint64,uint64)": [
        {
          "notice": "Custom error to indicate that the limits are wrong (lower limit >= upper limit)."
        }
      ],
      "ZeroAddress()": [
        {
          "notice": "Custom error to indicate that null address has been passed."
        }
      ]
    },
    "kind": "user",
    "methods": {},
    "notice": "StrollManager is a contract that manages top ups for the Stroll protocol.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StrollManager.sol:StrollManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2839,
        "contract": "contracts/StrollManager.sol:StrollManager",
        "label": "minLower",
        "offset": 20,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 2843,
        "contract": "contracts/StrollManager.sol:StrollManager",
        "label": "minUpper",
        "offset": 0,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 2849,
        "contract": "contracts/StrollManager.sol:StrollManager",
        "label": "approvedStrategies",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2854,
        "contract": "contracts/StrollManager.sol:StrollManager",
        "label": "topUps",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(TopUp)3877_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IStrategy)3759": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_contract(ISuperToken)1872": {
        "encoding": "inplace",
        "label": "contract ISuperToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(TopUp)3877_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IStrollManager.TopUp)",
        "numberOfBytes": "32",
        "value": "t_struct(TopUp)3877_storage"
      },
      "t_struct(TopUp)3877_storage": {
        "encoding": "inplace",
        "label": "struct IStrollManager.TopUp",
        "members": [
          {
            "astId": 3862,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3865,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "superToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(ISuperToken)1872"
          },
          {
            "astId": 3868,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "strategy",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IStrategy)3759"
          },
          {
            "astId": 3870,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "liquidityToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3872,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "expiry",
            "offset": 20,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 3874,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "lowerLimit",
            "offset": 0,
            "slot": "4",
            "type": "t_uint64"
          },
          {
            "astId": 3876,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "upperLimit",
            "offset": 8,
            "slot": "4",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}