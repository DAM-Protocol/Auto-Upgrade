{
  "address": "0xcF80141dA5BbFcD224a1817a2b0c3Cb04f55f91A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_icfa",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_minLower",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_minUpper",
          "type": "uint64"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "AddedApprovedStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "topUpAmount",
          "type": "uint256"
        }
      ],
      "name": "PerformedTopUp",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "RemovedApprovedStrategy",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "superToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "expiry",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lowerLimit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "upperLimit",
          "type": "uint256"
        }
      ],
      "name": "TopUpCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "superToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidityToken",
          "type": "address"
        }
      ],
      "name": "TopUpDeleted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CFA_V1",
      "outputs": [
        {
          "internalType": "contract IConstantFlowAgreementV1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "addApprovedStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedStrategies",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken",
          "type": "address"
        }
      ],
      "name": "checkTopUp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_index",
          "type": "bytes32"
        }
      ],
      "name": "checkTopUpByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_expiry",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_lowerLimit",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_upperLimit",
          "type": "uint64"
        }
      ],
      "name": "createTopUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_indices",
          "type": "bytes32[]"
        }
      ],
      "name": "deleteBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken",
          "type": "address"
        }
      ],
      "name": "deleteTopUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_index",
          "type": "bytes32"
        }
      ],
      "name": "deleteTopUpByIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken",
          "type": "address"
        }
      ],
      "name": "getTopUp",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "contract ISuperToken",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "contract IStrategy",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "liquidityToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lowerLimit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "upperLimit",
              "type": "uint64"
            }
          ],
          "internalType": "struct StrollManager.TopUp",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_index",
          "type": "bytes32"
        }
      ],
      "name": "getTopUpByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "contract ISuperToken",
              "name": "superToken",
              "type": "address"
            },
            {
              "internalType": "contract IStrategy",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "liquidityToken",
              "type": "address"
            },
            {
              "internalType": "uint64",
              "name": "expiry",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "lowerLimit",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "upperLimit",
              "type": "uint64"
            }
          ],
          "internalType": "struct StrollManager.TopUp",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken",
          "type": "address"
        }
      ],
      "name": "getTopUpIndex",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "isApprovedStrategy",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLower",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minUpper",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_superToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityToken",
          "type": "address"
        }
      ],
      "name": "performTopUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_index",
          "type": "bytes32"
        }
      ],
      "name": "performTopUpByIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "removeApprovedStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x825d61ba20a4658a9bd20c65131a5cbb857b8ae5d624275824aba9103128c2ef",
  "receipt": {
    "to": null,
    "from": "0x3c6812B64E44bfd348A08EE3Caf8d1B85a36478c",
    "contractAddress": "0xcF80141dA5BbFcD224a1817a2b0c3Cb04f55f91A",
    "transactionIndex": 26,
    "gasUsed": "1316911",
    "logsBloom": "0x
    "blockHash": "0x3ec86ec2c32b23775f2fd651ec007b540652c41045e23e7ab39e38ba1a433b17",
    "transactionHash": "0x825d61ba20a4658a9bd20c65131a5cbb857b8ae5d624275824aba9103128c2ef",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 10392936,
        "transactionHash": "0x825d61ba20a4658a9bd20c65131a5cbb857b8ae5d624275824aba9103128c2ef",
        "address": "0xcF80141dA5BbFcD224a1817a2b0c3Cb04f55f91A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003c6812b64e44bfd348a08ee3caf8d1b85a36478c"
        ],
        "data": "0x",
        "logIndex": 52,
        "blockHash": "0x3ec86ec2c32b23775f2fd651ec007b540652c41045e23e7ab39e38ba1a433b17"
      }
    ],
    "blockNumber": 10392936,
    "cumulativeGasUsed": "8696505",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF4C5310E51F6079F601a5fb7120bC72a70b96e2A",
    43200,
    172800
  ],
  "numDeployments": 1,
  "solcInputHash": "e44751850d418e58c76a804e39b757d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_icfa\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_minLower\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_minUpper\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"AddedApprovedStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"topUpAmount\",\"type\":\"uint256\"}],\"name\":\"PerformedTopUp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"RemovedApprovedStrategy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lowerLimit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"upperLimit\",\"type\":\"uint256\"}],\"name\":\"TopUpCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"superToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"}],\"name\":\"TopUpDeleted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CFA_V1\",\"outputs\":[{\"internalType\":\"contract IConstantFlowAgreementV1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"addApprovedStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedStrategies\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"}],\"name\":\"checkTopUp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_index\",\"type\":\"bytes32\"}],\"name\":\"checkTopUpByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_lowerLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_upperLimit\",\"type\":\"uint64\"}],\"name\":\"createTopUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_indices\",\"type\":\"bytes32[]\"}],\"name\":\"deleteBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"}],\"name\":\"deleteTopUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_index\",\"type\":\"bytes32\"}],\"name\":\"deleteTopUpByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"}],\"name\":\"getTopUp\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowerLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"upperLimit\",\"type\":\"uint64\"}],\"internalType\":\"struct StrollManager.TopUp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_index\",\"type\":\"bytes32\"}],\"name\":\"getTopUpByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"contract ISuperToken\",\"name\":\"superToken\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityToken\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"expiry\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"lowerLimit\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"upperLimit\",\"type\":\"uint64\"}],\"internalType\":\"struct StrollManager.TopUp\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"}],\"name\":\"getTopUpIndex\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"isApprovedStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLower\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUpper\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_superToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityToken\",\"type\":\"address\"}],\"name\":\"performTopUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_index\",\"type\":\"bytes32\"}],\"name\":\"performTopUpByIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"removeApprovedStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StrollManager.sol\":\"StrollManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777Token standard as defined in the EIP.\\n *\\n * This contract uses the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 registry standard] to let\\n * token holders and recipients react to token movements by using setting implementers\\n * for the associated interfaces in said registry. See {IERC1820Registry} and\\n * {ERC1820Implementer}.\\n */\\ninterface IERC777 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For most token contracts, this value will equal 1.\\n     */\\n    function granularity() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external;\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external;\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external;\\n\\n    event Sent(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        bytes data,\\n        bytes operatorData\\n    );\\n\\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\\n\\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\\n\\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\\n\\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\\n}\\n\",\"keccak256\":\"0xe4e0b7e3f0265ffaa565d26acd2d45f2633f19127ed625e5a05a9f201a87a667\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"../superfluid/ISuperAgreement.sol\\\";\\nimport { ISuperfluidToken } from \\\"../superfluid/ISuperfluidToken.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid's constant flow agreement interface\\n *\\n * @author Superfluid\\n */\\nabstract contract IConstantFlowAgreementV1 is ISuperAgreement {\\n\\n    /// @dev ISuperAgreement.agreementType implementation\\n    function agreementType() external override pure returns (bytes32) {\\n        return keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1\\\");\\n    }\\n\\n    /**\\n     * @dev Get the maximum flow rate allowed with the deposit\\n     * @param deposit Deposit amount used for creating the flow\\n     */\\n    function getMaximumFlowRateFromDeposit(\\n        ISuperfluidToken token,\\n        uint256 deposit)\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @dev Get the deposit required for creating the flow\\n     * @param flowRate Flow rate to be tested\\n     * \\n     * NOTE: \\n     * - if calculated deposit (flowRate * liquidationPeriod) is less\\n     *   than the minimum deposit, we use the minimum deposit otherwise\\n     *   we use the calculated deposit\\n     */\\n    function getDepositRequiredForFlowRate(\\n        ISuperfluidToken token,\\n        int96 flowRate)\\n        external view virtual\\n        returns (uint256 deposit);\\n\\n    /**\\n     * @dev Create a flow betwen sender and receiver.\\n     * @param token Super token address.\\n     * @param receiver Flow receiver address.\\n     * @param flowRate New flow rate in amount per second.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementCreated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - A deposit is taken as safety margin for the solvency agents.\\n     * - A extra gas fee may be taken to pay for solvency agent liquidations.\\n     */\\n    function createFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n    /**\\n     * @dev Update the flow rate between sender and receiver.\\n     * @param token Super token address.\\n     * @param receiver Flow receiver address.\\n     * @param flowRate New flow rate in amount per second.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementUpdated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Only the flow sender may update the flow rate.\\n     * - Even if the flow rate is zero, the flow is not deleted\\n     * from the system.\\n     * - Deposit amount will be adjusted accordingly.\\n     * - No new gas fee is charged.\\n     */\\n    function updateFlow(\\n        ISuperfluidToken token,\\n        address receiver,\\n        int96 flowRate,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n\\n    /**\\n     * @dev Get the flow data between `sender` and `receiver`.\\n     * @param token Super token address.\\n     * @param sender Flow receiver.\\n     * @param receiver Flow sender.\\n     * @return timestamp Timestamp of when the flow is updated.\\n     * @return flowRate The flow rate.\\n     * @return deposit The amount of deposit the flow.\\n     * @return owedDeposit The amount of owed deposit of the flow.\\n     */\\n    function getFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @dev Get flow data using agreement ID\\n     * @param token Super token address.\\n     * @param agreementId The agreement ID.\\n     * @return timestamp Timestamp of when the flow is updated.\\n     * @return flowRate The flow rate.\\n     * @return deposit The amount of deposit the flow.\\n     * @return owedDeposit The amount of owed deposit of the flow.\\n     */\\n    function getFlowByID(\\n       ISuperfluidToken token,\\n       bytes32 agreementId\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n    /**\\n     * @dev Get the aggregated flow info of the account\\n     * @param token Super token address.\\n    * @param account Account for the query.\\n    */\\n    function getAccountFlowInfo(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (\\n            uint256 timestamp,\\n            int96 flowRate,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /**\\n     * @dev Get the net flow rate of the account\\n     * @param token Super token address.\\n     * @param account Account for the query.\\n     * @return flowRate Flow rate.\\n     */\\n    function getNetFlow(\\n        ISuperfluidToken token,\\n        address account\\n    )\\n        external view virtual\\n        returns (int96 flowRate);\\n\\n    /**\\n     * @dev Delete the flow between sender and receiver\\n     * @param token Super token address.\\n     * @param ctx Context bytes.\\n     * @param receiver Flow receiver address.\\n     *\\n     * # App callbacks\\n     *\\n     * - AgreementTerminated\\n     *   - agreementId - can be used in getFlowByID\\n     *   - agreementData - abi.encode(address flowSender, address flowReceiver)\\n     *\\n     * NOTE:\\n     * - Both flow sender and receiver may delete the flow.\\n     * - If Sender account is insolvent or in critical state, a solvency agent may\\n     *   also terminate the agreement.\\n     * - Gas fee may be returned to the sender.\\n     */\\n    function deleteFlow(\\n        ISuperfluidToken token,\\n        address sender,\\n        address receiver,\\n        bytes calldata ctx\\n    )\\n        external virtual\\n        returns(bytes memory newCtx);\\n\\n     /**\\n      * @dev Flow updated event.\\n      * @param token Super token address.\\n      * @param sender Flow sender address.\\n      * @param receiver Flow recipient address.\\n      * @param flowRate Flow rate in amount per second for this flow.\\n      * @param flowRate Total flow rate in amount per second for the sender.\\n      * @param flowRate Total flow rate in amount per second for the receiver.\\n      * @param userData The user provided data.\\n      */\\n     event FlowUpdated(\\n         ISuperfluidToken indexed token,\\n         address indexed sender,\\n         address indexed receiver,\\n         int96 flowRate,\\n         int256 totalSenderFlowRate,\\n         int256 totalReceiverFlowRate,\\n         bytes userData\\n     );\\n\\n}\\n\",\"keccak256\":\"0xd42f8c6825dc5088d78e0959cd44f1048dbc970563d7b8d18bae97fcfdc966a1\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/Definitions.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\n/**\\n * @dev Super app definitions library\\n */\\nlibrary SuperAppDefinitions {\\n\\n    /**************************************************************************\\n    / App manifest config word\\n    /**************************************************************************/\\n\\n    /*\\n     * App level is a way to allow the app to whitelist what other app it can\\n     * interact with (aka. composite app feature).\\n     *\\n     * For more details, refer to the technical paper of superfluid protocol.\\n     */\\n    uint256 constant internal APP_LEVEL_MASK = 0xFF;\\n\\n    // The app is at the final level, hence it doesn't want to interact with any other app\\n    uint256 constant internal APP_LEVEL_FINAL = 1 << 0;\\n\\n    // The app is at the second level, it may interact with other final level apps if whitelisted\\n    uint256 constant internal APP_LEVEL_SECOND = 1 << 1;\\n\\n    function getAppLevel(uint256 configWord) internal pure returns (uint8) {\\n        return uint8(configWord & APP_LEVEL_MASK);\\n    }\\n\\n    uint256 constant internal APP_JAIL_BIT = 1 << 15;\\n    function isAppJailed(uint256 configWord) internal pure returns (bool) {\\n        return (configWord & SuperAppDefinitions.APP_JAIL_BIT) > 0;\\n    }\\n\\n    /**************************************************************************\\n    / Callback implementation bit masks\\n    /**************************************************************************/\\n    uint256 constant internal AGREEMENT_CALLBACK_NOOP_BITMASKS = 0xFF << 32;\\n    uint256 constant internal BEFORE_AGREEMENT_CREATED_NOOP = 1 << (32 + 0);\\n    uint256 constant internal AFTER_AGREEMENT_CREATED_NOOP = 1 << (32 + 1);\\n    uint256 constant internal BEFORE_AGREEMENT_UPDATED_NOOP = 1 << (32 + 2);\\n    uint256 constant internal AFTER_AGREEMENT_UPDATED_NOOP = 1 << (32 + 3);\\n    uint256 constant internal BEFORE_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 4);\\n    uint256 constant internal AFTER_AGREEMENT_TERMINATED_NOOP = 1 << (32 + 5);\\n\\n    /**************************************************************************\\n    / App Jail Reasons\\n    /**************************************************************************/\\n\\n    uint256 constant internal APP_RULE_REGISTRATION_ONLY_IN_CONSTRUCTOR = 1;\\n    uint256 constant internal APP_RULE_NO_REGISTRATION_FOR_EOA = 2;\\n    uint256 constant internal APP_RULE_NO_REVERT_ON_TERMINATION_CALLBACK = 10;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_SENDER_ACCOUNT = 11;\\n    uint256 constant internal APP_RULE_NO_CRITICAL_RECEIVER_ACCOUNT = 12;\\n    uint256 constant internal APP_RULE_CTX_IS_READONLY = 20;\\n    uint256 constant internal APP_RULE_CTX_IS_NOT_CLEAN = 21;\\n    uint256 constant internal APP_RULE_CTX_IS_MALFORMATED = 22;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_NOT_WHITELISTED = 30;\\n    uint256 constant internal APP_RULE_COMPOSITE_APP_IS_JAILED = 31;\\n    uint256 constant internal APP_RULE_MAX_APP_LEVEL_REACHED = 40;\\n}\\n\\n/**\\n * @dev Context definitions library\\n */\\nlibrary ContextDefinitions {\\n\\n    /**************************************************************************\\n    / Call info\\n    /**************************************************************************/\\n\\n    // app level\\n    uint256 constant internal CALL_INFO_APP_LEVEL_MASK = 0xFF;\\n\\n    // call type\\n    uint256 constant internal CALL_INFO_CALL_TYPE_SHIFT = 32;\\n    uint256 constant internal CALL_INFO_CALL_TYPE_MASK = 0xF << CALL_INFO_CALL_TYPE_SHIFT;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_AGREEMENT = 1;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_ACTION = 2;\\n    uint8 constant internal CALL_INFO_CALL_TYPE_APP_CALLBACK = 3;\\n\\n    function decodeCallInfo(uint256 callInfo)\\n        internal pure\\n        returns (uint8 appLevel, uint8 callType)\\n    {\\n        appLevel = uint8(callInfo & CALL_INFO_APP_LEVEL_MASK);\\n        callType = uint8((callInfo & CALL_INFO_CALL_TYPE_MASK) >> CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n    function encodeCallInfo(uint8 appLevel, uint8 callType)\\n        internal pure\\n        returns (uint256 callInfo)\\n    {\\n        return uint256(appLevel) | (uint256(callType) << CALL_INFO_CALL_TYPE_SHIFT);\\n    }\\n\\n}\\n\\n/**\\n * @dev Batch operation library\\n */\\nlibrary BatchOperation {\\n    /**\\n     * @dev ERC20.approve batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationApprove(\\n     *     abi.decode(data, (address spender, uint256 amount))\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_APPROVE = 1;\\n    /**\\n     * @dev ERC20.transferFrom batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationTransferFrom(\\n     *     abi.decode(data, (address sender, address recipient, uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_ERC20_TRANSFER_FROM = 2;\\n    /**\\n     * @dev SuperToken.upgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationUpgrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_UPGRADE = 1 + 100;\\n    /**\\n     * @dev SuperToken.downgrade batch operation type\\n     *\\n     * Call spec:\\n     * ISuperToken(target).operationDowngrade(\\n     *     abi.decode(data, (uint256 amount)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERTOKEN_DOWNGRADE = 2 + 100;\\n    /**\\n     * @dev Superfluid.callAgreement batch operation type\\n     *\\n     * Call spec:\\n     * callAgreement(\\n     *     ISuperAgreement(target)),\\n     *     abi.decode(data, (bytes calldata, bytes userdata)\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_AGREEMENT = 1 + 200;\\n    /**\\n     * @dev Superfluid.callAppAction batch operation type\\n     *\\n     * Call spec:\\n     * callAppAction(\\n     *     ISuperApp(target)),\\n     *     data\\n     * )\\n     */\\n    uint32 constant internal OPERATION_TYPE_SUPERFLUID_CALL_APP_ACTION = 2 + 200;\\n}\\n\\nlibrary SuperfluidGovernanceConfigs {\\n\\n    bytes32 constant internal SUPERFLUID_REWARD_ADDRESS_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.superfluid.rewardAddress\\\");\\n\\n    bytes32 constant internal CFAv1_LIQUIDATION_PERIOD_CONFIG_KEY =\\n        keccak256(\\\"org.superfluid-finance.agreements.ConstantFlowAgreement.v1.liquidationPeriod\\\");\\n\\n    bytes32 constant internal SUPERTOKEN_MINIMUM_DEPOSIT_KEY = \\n        keccak256(\\\"org.superfluid-finance.superfluid.superTokenMinimumDeposit\\\");\\n\\n    function getTrustedForwarderConfigKey(address forwarder) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.trustedForwarder\\\",\\n            forwarder));\\n    }\\n\\n    function getAppRegistrationConfigKey(address deployer, string memory registrationKey) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.appWhiteListing.registrationKey\\\",\\n            deployer,\\n            registrationKey));\\n    }\\n\\n    function getAppFactoryConfigKey(address factory) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(\\n            \\\"org.superfluid-finance.superfluid.appWhiteListing.factory\\\",\\n            factory));\\n    }\\n}\\n\",\"keccak256\":\"0x629a096aa6ce1da21b6d6861ebcd640257fc3c77e5d7f7de5de73b251a0be4b3\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperAgreement.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\n\\n/**\\n * @title Superfluid's agreement interface.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperAgreement {\\n\\n    /**\\n     * @dev Initialize the agreement contract\\n     */\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the type of the agreement class.\\n     */\\n    function agreementType() external view returns (bytes32);\\n\\n    /**\\n     * @dev Calculate the real-time balance for the account of this agreement class.\\n     * @param account Account the state belongs to\\n     * @param time Future time used for the calculation.\\n     * @return dynamicBalance Dynamic balance portion of real-time balance of this agreement.\\n     * @return deposit Account deposit amount of this agreement.\\n     * @return owedDeposit Account owed deposit amount of this agreement.\\n     */\\n    function realtimeBalanceOf(\\n        ISuperfluidToken token,\\n        address account,\\n        uint256 time\\n    )\\n        external\\n        view\\n        returns (\\n            int256 dynamicBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit\\n        );\\n\\n}\\n\",\"keccak256\":\"0xcf8a33fadd5db47562156a11098623246efd1b46a2c3d28269767bcbb324fd66\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperApp.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\n\\n/**\\n * @title Superfluid's app interface.\\n *\\n * NOTE:\\n * - Be fearful of the app jail, when the word permitted is used.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperApp {\\n\\n    /**\\n     * @dev Callback before a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n     * @dev Callback after a new agreement is created.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param cbdata The data returned from the before-hook callback.\\n     * @param ctx The context data.\\n     * @return newCtx The current context of the transaction.\\n     *\\n     * NOTE:\\n     * - State changes is permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function afterAgreementCreated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n     * @dev Callback before a new agreement is updated.\\n     * @param superToken The super token used for the agreement.\\n     * @param agreementClass The agreement class address.\\n     * @param agreementId The agreementId\\n     * @param agreementData The agreement data (non-compressed)\\n     * @param ctx The context data.\\n     * @return cbdata A free format in memory data the app can use to pass\\n     *          arbitary information to the after-hook callback.\\n     *\\n     * NOTE:\\n     * - It will be invoked with `staticcall`, no state changes are permitted.\\n     * - Only revert with a \\\"reason\\\" is permitted.\\n     */\\n    function beforeAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n\\n    /**\\n    * @dev Callback after a new agreement is updated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Only revert with a \\\"reason\\\" is permitted.\\n    */\\n    function afterAgreementUpdated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n\\n    /**\\n    * @dev Callback before a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param ctx The context data.\\n    * @return cbdata A free format in memory data the app can use to pass\\n    *          arbitary information to the after-hook callback.\\n    *\\n    * NOTE:\\n    * - It will be invoked with `staticcall`, no state changes are permitted.\\n    * - Revert is not permitted.\\n    */\\n    function beforeAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata ctx\\n    )\\n        external\\n        view\\n        returns (bytes memory cbdata);\\n\\n    /**\\n    * @dev Callback after a new agreement is terminated.\\n    * @param superToken The super token used for the agreement.\\n    * @param agreementClass The agreement class address.\\n    * @param agreementId The agreementId\\n    * @param agreementData The agreement data (non-compressed)\\n    * @param cbdata The data returned from the before-hook callback.\\n    * @param ctx The context data.\\n    * @return newCtx The current context of the transaction.\\n    *\\n    * NOTE:\\n    * - State changes is permitted.\\n    * - Revert is not permitted.\\n    */\\n    function afterAgreementTerminated(\\n        ISuperToken superToken,\\n        address agreementClass,\\n        bytes32 agreementId,\\n        bytes calldata agreementData,\\n        bytes calldata cbdata,\\n        bytes calldata ctx\\n    )\\n        external\\n        returns (bytes memory newCtx);\\n}\\n\",\"keccak256\":\"0xca93702505ec3c8244227e372687d9bdbc9d368fa07723d310ab9550501abb2a\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Superfluid's super token (Superfluid Token + ERC20 + ERC777) interface\\n *\\n * @author Superfluid\\n */\\ninterface ISuperToken is ISuperfluidToken, TokenInfo, IERC20, IERC777 {\\n\\n    /// @dev Initialize the contract\\n    function initialize(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        string calldata n,\\n        string calldata s\\n    ) external;\\n\\n    /**************************************************************************\\n    * TokenInfo & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view override(IERC777, TokenInfo) returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: SuperToken always uses 18 decimals.\\n     *\\n     * Note: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view override(TokenInfo) returns (uint8);\\n\\n    /**************************************************************************\\n    * ERC20 & ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() external view override(IERC777, IERC20) returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by an account (`owner`).\\n     */\\n    function balanceOf(address account) external view override(IERC777, IERC20) returns(uint256 balance);\\n\\n    /**************************************************************************\\n    * ERC20\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external override(IERC20) view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external override(IERC20) returns (bool);\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n     function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\\n\\n    /**************************************************************************\\n    * ERC777\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Returns the smallest part of the token that is not divisible. This\\n     * means all token operations (creation, movement and destruction) must have\\n     * amounts that are a multiple of this number.\\n     *\\n     * For super token contracts, this value is 1 always\\n     */\\n    function granularity() external view override(IERC777) returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * If send or receive hooks are registered for the caller and `recipient`,\\n     * the corresponding functions will be called with `data` and empty\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function send(address recipient, uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller's account, reducing the\\n     * total supply.\\n     *\\n     * If a send hook is registered for the caller, the corresponding function\\n     * will be called with `data` and empty `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - the caller must have at least `amount` tokens.\\n     */\\n    function burn(uint256 amount, bytes calldata data) external override(IERC777);\\n\\n    /**\\n     * @dev Returns true if an account is an operator of `tokenHolder`.\\n     * Operators can send and burn tokens on behalf of their owners. All\\n     * accounts are their own operator.\\n     *\\n     * See {operatorSend} and {operatorBurn}.\\n     */\\n    function isOperatorFor(address operator, address tokenHolder) external override(IERC777) view returns (bool);\\n\\n    /**\\n     * @dev Make an account an operator of the caller.\\n     *\\n     * See {isOperatorFor}.\\n     *\\n     * Emits an {AuthorizedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function authorizeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Revoke an account's operator status for the caller.\\n     *\\n     * See {isOperatorFor} and {defaultOperators}.\\n     *\\n     * Emits a {RevokedOperator} event.\\n     *\\n     * Requirements\\n     *\\n     * - `operator` cannot be calling address.\\n     */\\n    function revokeOperator(address operator) external override(IERC777);\\n\\n    /**\\n     * @dev Returns the list of default operators. These accounts are operators\\n     * for all token holders, even if {authorizeOperator} was never called on\\n     * them.\\n     *\\n     * This list is immutable, but individual holders may revoke these via\\n     * {revokeOperator}, in which case {isOperatorFor} will return false.\\n     */\\n    function defaultOperators() external override(IERC777) view returns (address[] memory);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient`. The caller must\\n     * be an operator of `sender`.\\n     *\\n     * If send or receive hooks are registered for `sender` and `recipient`,\\n     * the corresponding functions will be called with `data` and\\n     * `operatorData`. See {IERC777Sender} and {IERC777Recipient}.\\n     *\\n     * Emits a {Sent} event.\\n     *\\n     * Requirements\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `sender` must have at least `amount` tokens.\\n     * - the caller must be an operator for `sender`.\\n     * - `recipient` cannot be the zero address.\\n     * - if `recipient` is a contract, it must implement the {IERC777Recipient}\\n     * interface.\\n     */\\n    function operatorSend(\\n        address sender,\\n        address recipient,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the total supply.\\n     * The caller must be an operator of `account`.\\n     *\\n     * If a send hook is registered for `account`, the corresponding function\\n     * will be called with `data` and `operatorData`. See {IERC777Sender}.\\n     *\\n     * Emits a {Burned} event.\\n     *\\n     * Requirements\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     * - the caller must be an operator for `account`.\\n     */\\n    function operatorBurn(\\n        address account,\\n        uint256 amount,\\n        bytes calldata data,\\n        bytes calldata operatorData\\n    ) external override(IERC777);\\n\\n    /**************************************************************************\\n     * SuperToken custom token functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Mint new tokens for the account\\n     *\\n     * Modifiers:\\n     *  - onlySelf\\n     */\\n    function selfMint(\\n        address account,\\n        uint256 amount,\\n        bytes memory userData\\n    ) external;\\n\\n   /**\\n    * @dev Burn existing tokens for the account\\n    *\\n    * Modifiers:\\n    *  - onlySelf\\n    */\\n   function selfBurn(\\n       address account,\\n       uint256 amount,\\n       bytes memory userData\\n   ) external;\\n\\n    /**************************************************************************\\n     * SuperToken extra functions\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Transfer all available balance from `msg.sender` to `recipient`\\n     */\\n    function transferAll(address recipient) external;\\n\\n    /**************************************************************************\\n     * ERC20 wrapping\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Return the underlying token contract\\n     * @return tokenAddr Underlying token address\\n     */\\n    function getUnderlyingToken() external view returns(address tokenAddr);\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken.\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Upgrade ERC20 to SuperToken and transfer immediately\\n     * @param to The account to received upgraded tokens\\n     * @param amount Number of tokens to be upgraded (in 18 decimals)\\n     * @param data User data for the TokensRecipient callback\\n     *\\n     * NOTE: It will use \\u00b4transferFrom\\u00b4 to get tokens. Before calling this\\n     * function you should \\u00b4approve\\u00b4 this contract\\n     */\\n    function upgradeTo(address to, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev Token upgrade event\\n     * @param account Account where tokens are upgraded to\\n     * @param amount Amount of tokens upgraded (in 18 decimals)\\n     */\\n    event TokenUpgraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * @dev Downgrade SuperToken to ERC20.\\n     * @dev It will call transfer to send tokens\\n     * @param amount Number of tokens to be downgraded\\n     */\\n    function downgrade(uint256 amount) external;\\n\\n    /**\\n     * @dev Token downgrade event\\n     * @param account Account whose tokens are upgraded\\n     * @param amount Amount of tokens downgraded\\n     */\\n    event TokenDowngraded(\\n        address indexed account,\\n        uint256 amount\\n    );\\n\\n    /**************************************************************************\\n    * Batch Operations\\n    *************************************************************************/\\n\\n    /**\\n    * @dev Perform ERC20 approve by host contract.\\n    * @param account The account owner to be approved.\\n    * @param spender The spender of account owner's funds.\\n    * @param amount Number of tokens to be approved.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationApprove(\\n        address account,\\n        address spender,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Perform ERC20 transfer from by host contract.\\n    * @param account The account to spend sender's funds.\\n    * @param spender  The account where the funds is sent from.\\n    * @param recipient The recipient of thefunds.\\n    * @param amount Number of tokens to be transferred.\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationTransferFrom(\\n        address account,\\n        address spender,\\n        address recipient,\\n        uint256 amount\\n    ) external;\\n\\n    /**\\n    * @dev Upgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be upgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationUpgrade(address account, uint256 amount) external;\\n\\n    /**\\n    * @dev Downgrade ERC20 to SuperToken by host contract.\\n    * @param account The account to be changed.\\n    * @param amount Number of tokens to be downgraded (in 18 decimals)\\n    *\\n    * Modifiers:\\n    *  - onlyHost\\n    */\\n    function operationDowngrade(address account, uint256 amount) external;\\n\\n\\n    /**************************************************************************\\n    * Function modifiers for access control and parameter validations\\n    *\\n    * While they cannot be explicitly stated in function definitions, they are\\n    * listed in function definition comments instead for clarity.\\n    *\\n    * NOTE: solidity-coverage not supporting it\\n    *************************************************************************/\\n\\n    /// @dev The msg.sender must be the contract itself\\n    //modifier onlySelf() virtual\\n\\n}\\n\",\"keccak256\":\"0xba355f7d7d5d32ca345bcdb355759ba598a911ff07227ff80012a5e0bf660fb1\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\n\\nimport {\\n    IERC20,\\n    ERC20WithTokenInfo\\n} from \\\"../tokens/ERC20WithTokenInfo.sol\\\";\\n\\n\\ninterface ISuperTokenFactory {\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /// @dev Initialize the contract\\n    function initialize() external;\\n\\n    /**\\n     * @dev Get the current super token logic used by the factory\\n     */\\n    function getSuperTokenLogic() external view returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Upgradability modes\\n     */\\n    enum Upgradability {\\n        /// Non upgradable super token, `host.updateSuperTokenLogic` will revert\\n        NON_UPGRADABLE,\\n        /// Upgradable through `host.updateSuperTokenLogic` operation\\n        SEMI_UPGRADABLE,\\n        /// Always using the latest super token logic\\n        FULL_UPGRADABE\\n    }\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param underlyingDecimals Underlying token decimals\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     */\\n    function createERC20Wrapper(\\n        IERC20 underlyingToken,\\n        uint8 underlyingDecimals,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        returns (ISuperToken superToken);\\n\\n    /**\\n     * @dev Create new super token wrapper for the underlying ERC20 token with extra token info\\n     * @param underlyingToken Underlying ERC20 token\\n     * @param upgradability Upgradability mode\\n     * @param name Super token name\\n     * @param symbol Super token symbol\\n     *\\n     * NOTE:\\n     * - It assumes token provide the .decimals() function\\n     */\\n    function createERC20Wrapper(\\n        ERC20WithTokenInfo underlyingToken,\\n        Upgradability upgradability,\\n        string calldata name,\\n        string calldata symbol\\n    )\\n        external\\n        returns (ISuperToken superToken);\\n\\n    function initializeCustomSuperToken(\\n        address customSuperTokenProxy\\n    )\\n        external;\\n\\n    event SuperTokenLogicCreated(ISuperToken indexed tokenLogic);\\n\\n    event SuperTokenCreated(ISuperToken indexed token);\\n\\n    event CustomSuperTokenCreated(ISuperToken indexed token);\\n\\n}\\n\",\"keccak256\":\"0x7dc514c6c9eda681ed8ad66ccfb68dc22764b6c429ab55fddbba28b6b148621b\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n// This is required by the batchCall and decodeCtx\\npragma experimental ABIEncoderV2;\\n\\nimport { ISuperfluidGovernance } from \\\"./ISuperfluidGovernance.sol\\\";\\nimport { ISuperfluidToken } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperTokenFactory } from \\\"./ISuperTokenFactory.sol\\\";\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperApp } from \\\"./ISuperApp.sol\\\";\\nimport {\\n    SuperAppDefinitions,\\n    ContextDefinitions,\\n    BatchOperation,\\n    SuperfluidGovernanceConfigs\\n} from \\\"./Definitions.sol\\\";\\nimport { TokenInfo } from \\\"../tokens/TokenInfo.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC777 } from \\\"@openzeppelin/contracts/token/ERC777/IERC777.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid host interface.\\n\\n * It is the central contract of the system where super agreement, super app\\n * and super token features are connected together.\\n *\\n * The superfluid host contract is also the entry point for the protocol users,\\n * where batch call and meta transaction are provided for UX improvements.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluid {\\n\\n    /**************************************************************************\\n     * Governance\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get the current governace of the Superfluid host\\n     */\\n    function getGovernance() external view returns(ISuperfluidGovernance governance);\\n\\n    event GovernanceReplaced(ISuperfluidGovernance oldGov, ISuperfluidGovernance newGov);\\n    /**\\n     * @dev Replace the current governance with a new one\\n     */\\n    function replaceGovernance(ISuperfluidGovernance newGov) external;\\n\\n    /**************************************************************************\\n     * Agreement Whitelisting\\n     *************************************************************************/\\n\\n    event AgreementClassRegistered(bytes32 agreementType, address code);\\n    /**\\n     * @dev Register a new agreement class to the system\\n     * @param agreementClassLogic INitial agreement class code\\n     *\\n     * Modifiers:\\n     *  - onlyGovernance\\n     */\\n    function registerAgreementClass(ISuperAgreement agreementClassLogic) external;\\n\\n    event AgreementClassUpdated(bytes32 agreementType, address code);\\n    /**\\n    * @dev Update code of an agreement class\\n    * @param agreementClassLogic New code for the agreement class\\n    *\\n    * Modifiers:\\n    *  - onlyGovernance\\n    */\\n    function updateAgreementClass(ISuperAgreement agreementClassLogic) external;\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementTypeListed(bytes32 agreementType) external view returns(bool yes);\\n\\n    /**\\n    * @dev Check if the agreement class is whitelisted\\n    */\\n    function isAgreementClassListed(ISuperAgreement agreementClass) external view returns(bool yes);\\n\\n    /**\\n    * @dev Get agreement class\\n    */\\n    function getAgreementClass(bytes32 agreementType) external view returns(ISuperAgreement agreementClass);\\n\\n    /**\\n    * @dev Map list of the agreement classes using a bitmap\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function mapAgreementClasses(uint256 bitmap)\\n        external view\\n        returns (ISuperAgreement[] memory agreementClasses);\\n\\n    /**\\n    * @dev Create a new bitmask by adding a agreement class to it.\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function addToAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**\\n    * @dev Create a new bitmask by removing a agreement class from it.\\n    * @param bitmap Agreement class bitmap\\n    */\\n    function removeFromAgreementClassesBitmap(uint256 bitmap, bytes32 agreementType)\\n        external view\\n        returns (uint256 newBitmap);\\n\\n    /**************************************************************************\\n    * Super Token Factory\\n    **************************************************************************/\\n\\n    /**\\n     * @dev Get the super token factory\\n     * @return factory The factory\\n     */\\n    function getSuperTokenFactory() external view returns (ISuperTokenFactory factory);\\n\\n    /**\\n     * @dev Get the super token factory logic (applicable to upgradable deployment)\\n     * @return logic The factory logic\\n     */\\n    function getSuperTokenFactoryLogic() external view returns (address logic);\\n\\n    event SuperTokenFactoryUpdated(ISuperTokenFactory newFactory);\\n    /**\\n     * @dev Update super token factory\\n     * @param newFactory New factory logic\\n     */\\n    function updateSuperTokenFactory(ISuperTokenFactory newFactory) external;\\n\\n    event SuperTokenLogicUpdated(ISuperToken indexed token, address code);\\n    /**\\n     * @dev Update the super token logic to the latest\\n     *\\n     * NOTE:\\n     * - Refer toISuperTokenFactory.Upgradability for expected behaviours.\\n     */\\n    function updateSuperTokenLogic(ISuperToken token) external;\\n\\n    /**************************************************************************\\n     * App Registry\\n     *************************************************************************/\\n\\n    /**\\n     * @dev App registered event\\n     */\\n    event AppRegistered(ISuperApp indexed app);\\n\\n    /**\\n     * @dev Jail event for the app\\n     */\\n    event Jail(ISuperApp indexed app, uint256 reason);\\n\\n    /**\\n     * @dev Message sender declares it as a super app\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     *                   `SuperAppDefinitions`\\n     */\\n    function registerApp(uint256 configWord) external;\\n\\n    /**\\n     * @dev Message sender declares it as a super app, using a registration key\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     *                   `SuperAppDefinitions`\\n     * @param registrationKey The registration key issued by the governance\\n     */\\n    function registerAppWithKey(uint256 configWord, string calldata registrationKey) external;\\n\\n    /**\\n     * @dev Message sender declares app as a super app\\n     * @param configWord The super app manifest configuration, flags are defined in\\n     *                   `SuperAppDefinitions`\\n     * NOTE: only factory contracts authorized by governance can register super apps\\n     */\\n    function registerAppByFactory(ISuperApp app, uint256 configWord) external;\\n\\n    /**\\n     * @dev Query if the app is registered\\n     * @param app Super app address\\n     */\\n    function isApp(ISuperApp app) external view returns(bool);\\n\\n    /**\\n     * @dev Query app level\\n     * @param app Super app address\\n     */\\n    function getAppLevel(ISuperApp app) external view returns(uint8 appLevel);\\n\\n    /**\\n     * @dev Get the manifest of the super app\\n     * @param app Super app address\\n     */\\n    function getAppManifest(\\n        ISuperApp app\\n    )\\n        external view\\n        returns (\\n            bool isSuperApp,\\n            bool isJailed,\\n            uint256 noopMask\\n        );\\n\\n    /**\\n     * @dev Query if the app has been jailed\\n     * @param app Super app address\\n     */\\n    function isAppJailed(ISuperApp app) external view returns (bool isJail);\\n\\n    /**\\n     * @dev White-list the target app for app composition for the source app (msg.sender)\\n     * @param targetApp The taget super app address\\n     */\\n    function allowCompositeApp(ISuperApp targetApp) external;\\n\\n    /**\\n     * @dev Query if source app  is allowed to call the target app as downstream app.\\n     * @param app Super app address\\n     * @param targetApp The taget super app address\\n     */\\n    function isCompositeAppAllowed(\\n        ISuperApp app,\\n        ISuperApp targetApp\\n    )\\n        external view\\n        returns (bool isAppAllowed);\\n\\n    /**************************************************************************\\n     * Agreement Framework\\n     *\\n     * Agreements use these function to trigger super app callbacks, updates\\n     * app allowance and charge gas fees.\\n     *\\n     * These functions can only be called by registered agreements.\\n     *************************************************************************/\\n\\n    function callAppBeforeCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory cbdata);\\n\\n    function callAppAfterCallback(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bool isTermination,\\n        bytes calldata ctx\\n    )\\n        external\\n        // onlyAgreement\\n        // isAppActive(app)\\n        returns(bytes memory appCtx);\\n\\n    function appCallbackPush(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 appAllowanceGranted,\\n        int256 appAllowanceUsed,\\n        ISuperfluidToken appAllowanceToken\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory appCtx);\\n\\n    function appCallbackPop(\\n        bytes calldata ctx,\\n        int256 appAllowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function ctxUseAllowance(\\n        bytes calldata ctx,\\n        uint256 appAllowanceWantedMore,\\n        int256 appAllowanceUsedDelta\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    function jailApp(\\n        bytes calldata ctx,\\n        ISuperApp app,\\n        uint256 reason\\n    )\\n        external\\n        // onlyAgreement\\n        returns (bytes memory newCtx);\\n\\n    /**************************************************************************\\n     * Contextless Call Proxies\\n     *\\n     * NOTE: For EOAs or non-app contracts, they are the entry points for interacting\\n     * with agreements or apps.\\n     *\\n     * NOTE: The contextual call data should be generated using\\n     * abi.encodeWithSelector. The context parameter should be set to \\\"0x\\\",\\n     * an empty bytes array as a placeholder to be replaced by the host\\n     * contract.\\n     *************************************************************************/\\n\\n     /**\\n      * @dev Call agreement function\\n      * @param callData The contextual call data with placeholder ctx\\n      * @param userData Extra user data being sent to the super app callbacks\\n      */\\n     function callAgreement(\\n         ISuperAgreement agreementClass,\\n         bytes calldata callData,\\n         bytes calldata userData\\n     )\\n        external\\n        //cleanCtx\\n        returns(bytes memory returnedData);\\n\\n    /**\\n     * @dev Call app action\\n     * @param callData The contextual call data.\\n     *\\n     * NOTE: See callAgreement about contextual call data.\\n     */\\n    function callAppAction(\\n        ISuperApp app,\\n        bytes calldata callData\\n    )\\n        external\\n        //cleanCtx\\n        //isAppActive(app)\\n        returns(bytes memory returnedData);\\n\\n    /**************************************************************************\\n     * Contextual Call Proxies and Context Utilities\\n     *\\n     * For apps, they must use context they receive to interact with\\n     * agreements or apps.\\n     *\\n     * The context changes must be saved and returned by the apps in their\\n     * callbacks always, any modification to the context will be detected and\\n     * the violating app will be jailed.\\n     *************************************************************************/\\n\\n    /**\\n     * @dev ABIv2 Encoded memory data of context\\n     *\\n     * NOTE on backward compatibility:\\n     * - Non-dynamic fields are padded to 32bytes and packed\\n     * - Dynamic fields are referenced through a 32bytes offset to their \\\"parents\\\" field (or root)\\n     * - The order of the fields hence should not be rearranged in order to be backward compatible:\\n     *    - non-dynamic fields will be parsed at the same memory location,\\n     *    - and dynamic fields will simply have a greater offset than it was.\\n     */\\n    struct Context {\\n        //\\n        // Call context\\n        //\\n        // callback level\\n        uint8 appLevel;\\n        // type of call\\n        uint8 callType;\\n        // the system timestsamp\\n        uint256 timestamp;\\n        // The intended message sender for the call\\n        address msgSender;\\n\\n        //\\n        // Callback context\\n        //\\n        // For callbacks it is used to know which agreement function selector is called\\n        bytes4 agreementSelector;\\n        // User provided data for app callbacks\\n        bytes userData;\\n\\n        //\\n        // App context\\n        //\\n        // app allowance granted\\n        uint256 appAllowanceGranted;\\n        // app allowance wanted by the app callback\\n        uint256 appAllowanceWanted;\\n        // app allowance used, allowing negative values over a callback session\\n        int256 appAllowanceUsed;\\n        // app address\\n        address appAddress;\\n        // app allowance in super token\\n        ISuperfluidToken appAllowanceToken;\\n    }\\n\\n    function callAgreementWithContext(\\n        ISuperAgreement agreementClass,\\n        bytes calldata callData,\\n        bytes calldata userData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // onlyAgreement(agreementClass)\\n        returns (bytes memory newCtx, bytes memory returnedData);\\n\\n    function callAppActionWithContext(\\n        ISuperApp app,\\n        bytes calldata callData,\\n        bytes calldata ctx\\n    )\\n        external\\n        // validCtx(ctx)\\n        // isAppActive(app)\\n        returns (bytes memory newCtx);\\n\\n    function decodeCtx(bytes calldata ctx)\\n        external pure\\n        returns (Context memory context);\\n\\n    function isCtxValid(bytes calldata ctx) external view returns (bool);\\n\\n    /**************************************************************************\\n    * Batch call\\n    **************************************************************************/\\n    /**\\n     * @dev Batch operation data\\n     */\\n    struct Operation {\\n        // Operation. Defined in BatchOperation (Definitions.sol)\\n        uint32 operationType;\\n        // Operation target\\n        address target;\\n        // Data specific to the operation\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev Batch call function\\n     * @param operations Array of batch operations.\\n     */\\n    function batchCall(Operation[] memory operations) external;\\n\\n    /**\\n     * @dev Batch call function for trusted forwarders (EIP-2771)\\n     * @param operations Array of batch operations.\\n     */\\n    function forwardBatchCall(Operation[] memory operations) external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * TODO: turning these off because solidity-coverage don't like it\\n     *************************************************************************/\\n\\n     /* /// @dev The current superfluid context is clean.\\n     modifier cleanCtx() virtual;\\n\\n     /// @dev The superfluid context is valid.\\n     modifier validCtx(bytes memory ctx) virtual;\\n\\n     /// @dev The agreement is a listed agreement.\\n     modifier isAgreement(ISuperAgreement agreementClass) virtual;\\n\\n     // onlyGovernance\\n\\n     /// @dev The msg.sender must be a listed agreement.\\n     modifier onlyAgreement() virtual;\\n\\n     /// @dev The app is registered and not jailed.\\n     modifier isAppActive(ISuperApp app) virtual; */\\n}\\n\",\"keccak256\":\"0x987a883e8acd87e07eb00ebb1c882d294c7a0af2e5a8cb234270f83f4168438f\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\nimport { ISuperToken } from \\\"./ISuperToken.sol\\\";\\nimport { ISuperfluidToken  } from \\\"./ISuperfluidToken.sol\\\";\\nimport { ISuperfluid } from \\\"./ISuperfluid.sol\\\";\\n\\n\\n/**\\n * @dev Superfluid's Governance interface\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluidGovernance {\\n\\n    /**\\n     * @dev Replace the current governance with a new governance\\n     */\\n    function replaceGovernance(\\n        ISuperfluid host,\\n        address newGov) external;\\n\\n    /**\\n     * @dev Register a new agreement class\\n     */\\n    function registerAgreementClass(\\n        ISuperfluid host,\\n        address agreementClass) external;\\n\\n    /**\\n     * @dev Update logics of the contracts\\n     *\\n     * NOTE:\\n     * - Because they might have inter-dependencies, it is good to have one single function to update them all\\n     */\\n    function updateContracts(\\n        ISuperfluid host,\\n        address hostNewLogic,\\n        address[] calldata agreementClassNewLogics,\\n        address superTokenFactoryNewLogic\\n    ) external;\\n\\n    /**\\n     * @dev Update supertoken logic contract to the latest that is managed by the super token factory\\n     */\\n    function batchUpdateSuperTokenLogic(\\n        ISuperfluid host,\\n        ISuperToken[] calldata tokens) external;\\n\\n    /// @dev Get configuration as address value\\n    function getConfigAsAddress(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (address value);\\n\\n    /// @dev Get configuration as uint256 value\\n    function getConfigAsUint256(\\n        ISuperfluid host,\\n        ISuperfluidToken superToken,\\n        bytes32 key) external view returns (uint256 value);\\n\\n}\\n\",\"keccak256\":\"0x2ac401c7fb012ef43d8becad0196bcd41ac9ad33778a7a5e4809a1740a646e63\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluidToken.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.7.0;\\n\\nimport { ISuperAgreement } from \\\"./ISuperAgreement.sol\\\";\\n\\n\\n/**\\n * @title Superfluid's token interface.\\n *\\n * @author Superfluid\\n */\\ninterface ISuperfluidToken {\\n\\n    /**************************************************************************\\n     * Basic information\\n     *************************************************************************/\\n\\n    /**\\n     * @dev Get superfluid host contract address\\n     */\\n    function getHost() external view returns(address host);\\n\\n    /**\\n     * @dev Encoded liquidation type data mainly used for handling stack to deep errors\\n     * \\n     * Note:\\n     * - version: 1 \\n     * - liquidationType key:\\n     *    - 0 = reward account receives reward (PIC period)\\n     *    - 1 = liquidator account receives reward (Pleb period)\\n     *    - 2 = liquidator account receives reward (Pirate period/bailout)\\n     */\\n    struct LiquidationTypeData {\\n        uint256 version;\\n        uint8 liquidationType;\\n    }\\n\\n    /**************************************************************************\\n     * Real-time balance functions\\n     *************************************************************************/\\n\\n    /**\\n    * @dev Calculate the real balance of a user, taking in consideration all agreements of the account\\n    * @param account for the query\\n    * @param timestamp Time of balance\\n    * @return availableBalance Real-time balance\\n    * @return deposit Account deposit\\n    * @return owedDeposit Account owed Deposit\\n    */\\n    function realtimeBalanceOf(\\n       address account,\\n       uint256 timestamp\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit);\\n\\n    /// @dev realtimeBalanceOf with timestamp equals to block timestamp\\n    function realtimeBalanceOfNow(\\n       address account\\n    )\\n        external view\\n        returns (\\n            int256 availableBalance,\\n            uint256 deposit,\\n            uint256 owedDeposit,\\n            uint256 timestamp);\\n\\n    /**\\n    * @dev Check if one account is critical\\n    * @param account Account check if is critical by a future time\\n    * @param timestamp Time of balance\\n    * @return isCritical\\n    */\\n    function isAccountCritical(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n    * @dev Check if one account is critical now\\n    * @param account Account check if is critical by a future time\\n    * @return isCritical\\n    */\\n    function isAccountCriticalNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isCritical);\\n\\n    /**\\n     * @dev Check if one account is solvent\\n     * @param account Account check if is solvent by a future time\\n     * @param timestamp Time of balance\\n     * @return isSolvent\\n     */\\n    function isAccountSolvent(\\n        address account,\\n        uint256 timestamp\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n     * @dev Check if one account is solvent now\\n     * @param account Account check if is solvent now\\n     * @return isSolvent\\n     */\\n    function isAccountSolventNow(\\n        address account\\n    )\\n        external view\\n        returns(bool isSolvent);\\n\\n    /**\\n    * @dev Get a list of agreements that is active for the account\\n    * @dev An active agreement is one that has state for the account\\n    * @param account Account to query\\n    * @return activeAgreements List of accounts that have non-zero states for the account\\n    */\\n    function getAccountActiveAgreements(address account)\\n       external view\\n       returns(ISuperAgreement[] memory activeAgreements);\\n\\n\\n   /**************************************************************************\\n    * Super Agreement hosting functions\\n    *************************************************************************/\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function createAgreement(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement creation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementCreated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Get data of the agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @return data Data of the agreement\\n     */\\n    function getAgreementData(\\n        address agreementClass,\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external view\\n        returns(bytes32[] memory data);\\n\\n    /**\\n     * @dev Create a new agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    function updateAgreementData(\\n        bytes32 id,\\n        bytes32[] calldata data\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement creation event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param data Agreement data\\n     */\\n    event AgreementUpdated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        bytes32[] data\\n    );\\n\\n    /**\\n     * @dev Close the agreement\\n     * @param id Agreement ID\\n     */\\n    function terminateAgreement(\\n        bytes32 id,\\n        uint dataLength\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement termination event\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     */\\n    event AgreementTerminated(\\n        address indexed agreementClass,\\n        bytes32 id\\n    );\\n\\n    /**\\n     * @dev Update agreement state slot\\n     * @param account Account to be updated\\n     *\\n     * NOTE\\n     * - To clear the storage out, provide zero-ed array of intended length\\n     */\\n    function updateAgreementStateSlot(\\n        address account,\\n        uint256 slotId,\\n        bytes32[] calldata slotData\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement account state updated event\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account updated\\n     * @param slotId slot id of the agreement state\\n     */\\n    event AgreementStateUpdated(\\n        address indexed agreementClass,\\n        address indexed account,\\n        uint256 slotId\\n    );\\n\\n    /**\\n     * @dev Get data of the slot of the state of a agreement\\n     * @param agreementClass Contract address of the agreement\\n     * @param account Account to query\\n     * @param slotId slot id of the state\\n     * @param dataLength length of the state data\\n     */\\n    function getAgreementStateSlot(\\n        address agreementClass,\\n        address account,\\n        uint256 slotId,\\n        uint dataLength\\n    )\\n        external view\\n        returns (bytes32[] memory slotData);\\n\\n    /**\\n     * @dev Settle balance from an account by the agreement.\\n     *      The agreement needs to make sure that the balance delta is balanced afterwards\\n     * @param account Account to query.\\n     * @param delta Amount of balance delta to be settled\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function settleBalance(\\n        address account,\\n        int256 delta\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement liquidation event (DEPRECATED BY AgreementLiquidatedBy)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAccount Account that collect the reward\\n     * @param rewardAmount Amount of liquidation reward\\n     */\\n    event AgreementLiquidated(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed rewardAccount,\\n        uint256 rewardAmount\\n    );\\n\\n    /**\\n     * @dev System bailout occurred (DEPRECATIED BY AgreementLiquidatedBy)\\n     * @param bailoutAccount Account that bailout the penalty account\\n     * @param bailoutAmount Amount of account bailout\\n     */\\n    event Bailout(\\n        address indexed bailoutAccount,\\n        uint256 bailoutAmount\\n    );\\n\\n    /**\\n     * @dev Agreement liquidation event (including agent account)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param liquidatorAccount Account of the agent that performed the liquidation.\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param bondAccount Account that collect the reward or bailout accounts\\n     * @param rewardAmount Amount of liquidation reward\\n     * @param bailoutAmount Amount of liquidation bailouot\\n     *\\n     * NOTE:\\n     * Reward account rule:\\n     * - if bailout is equal to 0, then\\n     *   - the bondAccount will get the rewardAmount,\\n     *   - the penaltyAccount will pay for the rewardAmount.\\n     * - if bailout is larger than 0, then\\n     *   - the liquidatorAccount will get the rewardAmouont,\\n     *   - the bondAccount will pay for both the rewardAmount and bailoutAmount,\\n     *   - the penaltyAccount will pay for the rewardAmount while get the bailoutAmount.\\n     */\\n    event AgreementLiquidatedBy(\\n        address liquidatorAccount,\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed penaltyAccount,\\n        address indexed bondAccount,\\n        uint256 rewardAmount,\\n        uint256 bailoutAmount\\n    );\\n\\n    /**\\n     * @dev Make liquidation payouts\\n     * @param id Agreement ID\\n     * @param liquidator Address of the executer of liquidation\\n     * @param penaltyAccount Account of the agreement to be penalized\\n     * @param rewardAmount Amount of liquidation reward\\n     * @param bailoutAmount Amount of account bailout needed\\n     *\\n     * NOTE:\\n     * Liquidation rules:\\n     *  - If a bailout is required (bailoutAmount > 0)\\n     *     - the actual reward goes to the liquidator,\\n     *     - while the reward account becomes the bailout account\\n     *     - total bailout include: bailout amount + reward amount\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function makeLiquidationPayouts\\n    (\\n        bytes32 id,\\n        address liquidator,\\n        address penaltyAccount,\\n        uint256 rewardAmount,\\n        uint256 bailoutAmount\\n    )\\n        external;\\n\\n    /**\\n     * @dev Agreement liquidation event v2 (including agent account)\\n     * @param agreementClass Contract address of the agreement\\n     * @param id Agreement ID\\n     * @param liquidatorAccount Address of the executor of the liquidation\\n     * @param targetAccount Account of the stream sender\\n     * @param rewardAccount Account that collects the reward or bails out insolvent accounts\\n     * @param rewardAmount The amount the reward recipient account balance should change by\\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\\n     * @param liquidationTypeData The encoded liquidation type data including the version (how to decode)\\n     *\\n     * NOTE:\\n     * Reward account rule:\\n     * - if the agreement is liquidated during the PIC period\\n     *   - the rewardAccount will get the rewardAmount (remaining deposit), regardless of the liquidatorAccount\\n     *   - the targetAccount will pay for the rewardAmount\\n     * - if the agreement is liquidated after the PIC period AND the targetAccount is solvent\\n     *   - the liquidatorAccount will get the rewardAmount (remaining deposit)\\n     *   - the targetAccount will pay for the rewardAmount\\n     * - if the targetAccount is insolvent\\n     *   - the liquidatorAccount will get the rewardAmount (single deposit)\\n     *   - the rewardAccount will pay for both the rewardAmount and bailoutAmount\\n     *   - the targetAccount will receive the bailoutAmount\\n     */\\n    event AgreementLiquidatedV2(\\n        address indexed agreementClass,\\n        bytes32 id,\\n        address indexed liquidatorAccount,\\n        address indexed targetAccount,\\n        address rewardAccount,\\n        uint256 rewardAmount,\\n        int256 targetAccountBalanceDelta,\\n        bytes liquidationTypeData\\n    );\\n\\n    /**\\n     * @dev Make liquidation payouts (v2)\\n     * @param id Agreement ID\\n     * @param liquidationTypeData Data regarding the version of the liquidation schema and the type\\n     * @param liquidatorAccount Address of the executor of the liquidation\\n     * @param useDefaultRewardAccount Whether or not the default reward account receives the rewardAmount\\n     * @param targetAccount Account of the stream sender\\n     * @param rewardAmount The amount the reward recepient account will receive\\n     * @param targetAccountBalanceDelta The amount the sender account balance should change by\\n     *\\n     * - If a bailout is required (bailoutAmount > 0)\\n     *   - the actual reward (single deposit) goes to the executor,\\n     *   - while the reward account becomes the bailout account\\n     *   - total bailout include: bailout amount + reward amount\\n     *   - the targetAccount will be bailed out\\n     * - If a bailout is not required\\n     *   - the targetAccount will pay the rewardAmount\\n     *   - the liquidator (reward account in PIC period) will receive the rewardAmount\\n     *\\n     * Modifiers:\\n     *  - onlyAgreement\\n     */\\n    function makeLiquidationPayoutsV2\\n    (\\n        bytes32 id,\\n        bytes memory liquidationTypeData,\\n        address liquidatorAccount,\\n        bool useDefaultRewardAccount,\\n        address targetAccount,\\n        uint256 rewardAmount,\\n        int256 targetAccountBalanceDelta\\n    ) external;\\n\\n    /**************************************************************************\\n     * Function modifiers for access control and parameter validations\\n     *\\n     * While they cannot be explicitly stated in function definitions, they are\\n     * listed in function definition comments instead for clarity.\\n     *\\n     * NOTE: solidity-coverage not supporting it\\n     *************************************************************************/\\n\\n     /// @dev The msg.sender must be host contract\\n     //modifier onlyHost() virtual;\\n\\n    /// @dev The msg.sender must be a listed agreement.\\n    //modifier onlyAgreement() virtual;\\n\\n}\\n\",\"keccak256\":\"0x6c573b0c0d9ccfc73f787da2e06c725b714d9a36357cfe4fb3c5fb7b47d75665\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/ERC20WithTokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.5.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { TokenInfo } from \\\"./TokenInfo.sol\\\";\\n\\n\\n/**\\n *\\n * @dev Interface for ERC20 token with token info\\n *\\n * NOTE: Using abstract contract instead of interfaces because old solidity\\n * does not support interface inheriting other interfaces\\n * solhint-disable-next-line no-empty-blocks\\n *\\n */\\n// solhint-disable-next-line no-empty-blocks\\nabstract contract ERC20WithTokenInfo is IERC20, TokenInfo {}\\n\",\"keccak256\":\"0x808d3a486826e7f119671174a77896c6e23578e691625350dbb3e9f74a0d5137\",\"license\":\"AGPLv3\"},\"@superfluid-finance/ethereum-contracts/contracts/interfaces/tokens/TokenInfo.sol\":{\"content\":\"// SPDX-License-Identifier: AGPLv3\\npragma solidity >= 0.5.0;\\n\\n/**\\n * @dev ERC20 token info interface\\n *\\n * NOTE: ERC20 standard interface does not specify these functions, but\\n * often the token implementations have them.\\n *\\n */\\ninterface TokenInfo {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x4dee21b8f64edbfe811a300d31f529b5367d1186d69b8b2b8dc3373be7a108b0\",\"license\":\"AGPLv3\"},\"contracts/StrollManager.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./interfaces/IStrategy.sol\\\";\\r\\nimport \\\"./interfaces/IERC20Mod.sol\\\";\\r\\nimport { IConstantFlowAgreementV1 } from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/agreements/IConstantFlowAgreementV1.sol\\\";\\r\\n\\r\\n// solhint-disable not-rely-on-time\\r\\ncontract StrollManager is Ownable {\\r\\n\\r\\n    struct TopUp {\\r\\n        address user;\\r\\n        ISuperToken superToken;\\r\\n        IStrategy strategy;\\r\\n        address liquidityToken;\\r\\n        uint64 expiry;\\r\\n        uint64 lowerLimit;\\r\\n        uint64 upperLimit;\\r\\n    }\\r\\n\\r\\n    uint64 public minLower;\\r\\n    uint64 public minUpper;\\r\\n    mapping(bytes32 => TopUp) private topUps; //id = sha3(user, superToken, liquidityToken)\\r\\n    mapping(address => bool) public approvedStrategies;\\r\\n\\r\\n    // solhint-disable-next-line\\r\\n    IConstantFlowAgreementV1 public immutable CFA_V1;\\r\\n\\r\\n    event TopUpCreated(\\r\\n        bytes32 indexed id,\\r\\n        address indexed user,\\r\\n        address indexed superToken,\\r\\n        address strategy,\\r\\n        address liquidityToken,\\r\\n        uint256 expiry,\\r\\n        uint256 lowerLimit,\\r\\n        uint256 upperLimit\\r\\n    );\\r\\n\\r\\n    event TopUpDeleted(\\r\\n        bytes32 indexed id,\\r\\n        address indexed user,\\r\\n        address indexed superToken,\\r\\n        address strategy,\\r\\n        address liquidityToken\\r\\n    );\\r\\n\\r\\n    event PerformedTopUp(bytes32 indexed id, uint256 topUpAmount);\\r\\n    event AddedApprovedStrategy(address indexed strategy);\\r\\n    event RemovedApprovedStrategy(address indexed strategy);\\r\\n\\r\\n    constructor(\\r\\n        address _icfa,\\r\\n        uint64 _minLower,\\r\\n        uint64 _minUpper\\r\\n    ) {\\r\\n        CFA_V1 = IConstantFlowAgreementV1(_icfa);\\r\\n        minLower = _minLower;\\r\\n        minUpper = _minUpper;\\r\\n    }\\r\\n\\r\\n    function getTopUpIndex(\\r\\n        address _user,\\r\\n        address _superToken,\\r\\n        address _liquidityToken\\r\\n    ) public pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(_user, _superToken, _liquidityToken));\\r\\n    }\\r\\n\\r\\n    function createTopUp(\\r\\n        address _superToken,\\r\\n        address _strategy,\\r\\n        address _liquidityToken,\\r\\n        uint64 _expiry,\\r\\n        uint64 _lowerLimit,\\r\\n        uint64 _upperLimit\\r\\n    ) external {\\r\\n        require(\\r\\n            _superToken != address(0) &&\\r\\n            _strategy != address(0) &&\\r\\n            _liquidityToken != address(0),\\r\\n            \\\"Null Address\\\"\\r\\n        );\\r\\n\\r\\n        require(_expiry > block.timestamp, \\\"Invalid time\\\");\\r\\n        require(_lowerLimit >= minLower, \\\"Increase lower limit\\\");\\r\\n        require(_upperLimit >= minUpper, \\\"Increase upper limit\\\");\\r\\n        require(approvedStrategies[_strategy], \\\"strategy not allowed\\\");\\r\\n        require(IStrategy(_strategy).isSupportedSuperToken(ISuperToken(_superToken)), \\\"super token not supported\\\");\\r\\n\\r\\n        // check if topUp already exists for given user and superToken\\r\\n        bytes32 index = getTopUpIndex(msg.sender, _superToken, _liquidityToken);\\r\\n\\r\\n        TopUp memory topUp = TopUp( // create new TopUp or update topup\\r\\n            msg.sender,\\r\\n            ISuperToken(_superToken),\\r\\n            IStrategy(_strategy),\\r\\n            _liquidityToken,\\r\\n            _expiry,\\r\\n            _lowerLimit,\\r\\n            _upperLimit\\r\\n        );\\r\\n        topUps[index] = topUp;\\r\\n\\r\\n        emit TopUpCreated(\\r\\n            index,\\r\\n            msg.sender,\\r\\n            _superToken,\\r\\n            _strategy,\\r\\n            _liquidityToken,\\r\\n            _expiry,\\r\\n            _lowerLimit,\\r\\n            _upperLimit\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getTopUp(\\r\\n        address _user,\\r\\n        address _superToken,\\r\\n        address _liquidityToken\\r\\n    )\\r\\n    public\\r\\n    view\\r\\n    returns (TopUp memory)\\r\\n    {\\r\\n        return getTopUpByIndex(\\r\\n            getTopUpIndex(_user, _superToken, _liquidityToken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getTopUpByIndex(bytes32 _index)\\r\\n    public\\r\\n    view\\r\\n    returns (TopUp memory)\\r\\n    {\\r\\n        return topUps[_index];\\r\\n    }\\r\\n\\r\\n    function checkTopUp(\\r\\n        address _user,\\r\\n        address _superToken,\\r\\n        address _liquidityToken\\r\\n    ) public view returns (uint256) {\\r\\n        return checkTopUpByIndex(\\r\\n            getTopUpIndex(_user, _superToken, _liquidityToken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function checkTopUpByIndex(bytes32 _index) public view returns (uint256 amount) {\\r\\n        TopUp memory topUp = topUps[_index];\\r\\n\\r\\n        if (\\r\\n            topUp.user == address(0) || // Task exists and has a valid user\\r\\n            topUp.expiry <= block.timestamp || // Task exists and current time is before task end time\\r\\n            IERC20(topUp.liquidityToken).allowance(\\r\\n                topUp.user,\\r\\n                address(topUp.strategy) // contract is allowed to spend\\r\\n            ) ==\\r\\n            0 ||\\r\\n            IERC20(topUp.liquidityToken).balanceOf(topUp.user) == 0 // check user balance\\r\\n        ) return 0;\\r\\n\\r\\n        int96 flowRate = CFA_V1.getNetFlow(topUp.superToken, topUp.user);\\r\\n\\r\\n        if (flowRate < 0) {\\r\\n            uint256 superBalance = topUp.superToken.balanceOf(topUp.user);\\r\\n            uint256 positiveFlowRate = uint256(uint96(-1 * flowRate));\\r\\n\\r\\n            if (superBalance <= (positiveFlowRate * topUp.lowerLimit)) {\\r\\n                return positiveFlowRate * topUp.upperLimit;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function performTopUp(\\r\\n        address _user,\\r\\n        address _superToken,\\r\\n        address _liquidityToken\\r\\n    ) external {\\r\\n        performTopUpByIndex(getTopUpIndex(_user, _superToken, _liquidityToken));\\r\\n    }\\r\\n\\r\\n    function performTopUpByIndex(bytes32 _index) public {\\r\\n        uint256 topUpAmount = checkTopUpByIndex(_index);\\r\\n        require(topUpAmount > 0, \\\"TopUp check failed\\\");\\r\\n\\r\\n        TopUp memory topUp = topUps[_index];\\r\\n        topUp.strategy.topUp(\\r\\n            topUp.user,\\r\\n            ISuperToken(topUp.superToken),\\r\\n            topUpAmount\\r\\n        );\\r\\n        emit PerformedTopUp(_index, topUpAmount);\\r\\n    }\\r\\n\\r\\n    function isApprovedStrategy(address strategy) external view returns(bool) {\\r\\n        return approvedStrategies[strategy];\\r\\n    }\\r\\n\\r\\n    function addApprovedStrategy(address strategy) external onlyOwner {\\r\\n        require(strategy != address(0), \\\"empty strategy\\\");\\r\\n        approvedStrategies[strategy] = true;\\r\\n        emit AddedApprovedStrategy(strategy);\\r\\n    }\\r\\n\\r\\n    function removeApprovedStrategy(address strategy) external onlyOwner {\\r\\n        if(approvedStrategies[strategy]) {\\r\\n            delete approvedStrategies[strategy];\\r\\n            emit RemovedApprovedStrategy(strategy);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function deleteTopUpByIndex(bytes32 _index) public {\\r\\n        TopUp memory topUp = topUps[_index];\\r\\n        require(\\r\\n            topUp.user == msg.sender || topUp.expiry < block.timestamp,\\r\\n            \\\"Can't delete TopUp\\\"\\r\\n        );\\r\\n        delete topUps[_index];\\r\\n\\r\\n        emit TopUpDeleted(\\r\\n            _index,\\r\\n            topUp.user,\\r\\n            address(topUp.superToken),\\r\\n            address(topUp.strategy),\\r\\n            topUp.liquidityToken\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function deleteTopUp(\\r\\n        address _user,\\r\\n        address _superToken,\\r\\n        address _liquidityToken\\r\\n    ) public {\\r\\n        deleteTopUpByIndex(\\r\\n            getTopUpIndex(_user, _superToken, _liquidityToken)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function deleteBatch(bytes32[] calldata _indices) public {\\r\\n        // delete multiple top ups\\r\\n        for (uint256 i = 0; i < _indices.length; i++) {\\r\\n            deleteTopUpByIndex(_indices[i]);\\r\\n        }\\r\\n    }\\r\\n}\",\"keccak256\":\"0x382ba243ddebd75aa1299347178e5fe5552a1cbbd1d8b8ba722c6ee589d53ea5\",\"license\":\"Unlicense\"},\"contracts/interfaces/IERC20Mod.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity ^0.8.4;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IERC20Mod is IERC20 {\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\",\"keccak256\":\"0xda8564964401dcf6546f238df95478ed3cb944b5dc3a457d4039b7440b0ae25a\",\"license\":\"Unlicensed\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicensed\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport {ISuperToken} from \\\"@superfluid-finance/ethereum-contracts/contracts/interfaces/superfluid/ISuperfluid.sol\\\";\\r\\n\\r\\ninterface IStrategy {\\r\\n    event TopUp(address indexed user, address indexed superToken, uint256 superTokenAmount);\\r\\n\\r\\n    function topUp(address _user, ISuperToken _superToken, uint256 _superTokenAmount) external;\\r\\n\\r\\n    function isSupportedSuperToken(ISuperToken _superToken) external view returns(bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x2245d9d767af0f85083e1cc72e4fa56c673b25a759c87dd9bb7d4f746e6db6f3\",\"license\":\"Unlicensed\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162001764380380620017648339810160408190526200003491620000ff565b6200003f3362000092565b60609290921b6001600160601b03191660805260008054600160a01b600160e01b031916600160a01b6001600160401b0393841602179055600180546001600160401b0319169190921617905562000154565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160401b0381168114620000fa57600080fd5b919050565b60008060006060848603121562000114578283fd5b83516001600160a01b03811681146200012b578384fd5b92506200013b60208501620000e2565b91506200014b60408501620000e2565b90509250925092565b60805160601c6115ea6200017a600039600081816101560152610d6f01526115ea6000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80638bc6a941116100b8578063a7052e6b1161007c578063a7052e6b146103ff578063c613aec014610419578063f11665c91461043c578063f2556da91461044f578063f29730cf14610462578063f2fde38b1461047557600080fd5b80638bc6a941146102bc5780638da5cb5b146102cf578063947dd645146102e0578063985d28aa146102f35780639aed5c511461032f57600080fd5b8063715018a6116100ff578063715018a6146101e657806377a80e47146101ee578063854ba6d01461020f57806388882af2146102225780638b80f3511461023557600080fd5b80633aa4e5901461013c5780633db29ed81461015157806347cda691146101955780634e0e623d146101a857806359b830be146101bb575b600080fd5b61014f61014a366004611341565b610488565b005b6101787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61014f6101a33660046113b4565b6108a7565b61014f6101b63660046112de565b6108f8565b6001546101ce906001600160401b031681565b6040516001600160401b03909116815260200161018c565b61014f6109b5565b6102016101fc3660046112ff565b6109eb565b60405190815260200161018c565b61014f61021d366004611443565b610a03565b610201610230366004611443565b610b77565b6102486102433660046112ff565b610eea565b60405161018c919081516001600160a01b039081168252602080840151821690830152604080840151821690830152606080840151909116908201526080808301516001600160401b039081169183019190915260a08381015182169083015260c092830151169181019190915260e00190565b61014f6102ca3660046112de565b610f31565b6000546001600160a01b0316610178565b61014f6102ee366004611443565b610fc6565b61031f6103013660046112de565b6001600160a01b031660009081526003602052604090205460ff1690565b604051901515815260200161018c565b61024861033d366004611443565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915250600090815260026020818152604092839020835160e08101855281546001600160a01b039081168252600183015481169382019390935292810154821693830193909352600383015490811660608301526001600160401b03600160a01b9091048116608083015260049092015480831660a0830152600160401b900490911660c082015290565b6000546101ce90600160a01b90046001600160401b031681565b61031f6104273660046112de565b60036020526000908152604090205460ff1681565b61020161044a3660046112ff565b611160565b61014f61045d3660046112ff565b6111ab565b61014f6104703660046112ff565b6111b9565b61014f6104833660046112de565b6111c7565b6001600160a01b038616158015906104a857506001600160a01b03851615155b80156104bc57506001600160a01b03841615155b6104fc5760405162461bcd60e51b815260206004820152600c60248201526b4e756c6c204164647265737360a01b60448201526064015b60405180910390fd5b42836001600160401b0316116105435760405162461bcd60e51b815260206004820152600c60248201526b496e76616c69642074696d6560a01b60448201526064016104f3565b6000546001600160401b03600160a01b909104811690831610156105a05760405162461bcd60e51b8152602060048201526014602482015273125b98dc99585cd9481b1bddd95c881b1a5b5a5d60621b60448201526064016104f3565b6001546001600160401b0390811690821610156105f65760405162461bcd60e51b8152602060048201526014602482015273125b98dc99585cd9481d5c1c195c881b1a5b5a5d60621b60448201526064016104f3565b6001600160a01b03851660009081526003602052604090205460ff166106555760405162461bcd60e51b81526020600482015260146024820152731cdd1c985d1959de481b9bdd08185b1b1bddd95960621b60448201526064016104f3565b604051630fc888cb60e41b81526001600160a01b03878116600483015286169063fc888cb09060240160206040518083038186803b15801561069657600080fd5b505afa1580156106aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ce9190611423565b61071a5760405162461bcd60e51b815260206004820152601960248201527f737570657220746f6b656e206e6f7420737570706f727465640000000000000060448201526064016104f3565b6000610727338887611160565b6040805160e081018252338082526001600160a01b038b811660208085018281528d84168688019081528d8516606088019081526001600160401b03808f1660808a019081528e821660a08b019081528e831660c08c0190815260008e81526002988990528d90208c518154908c166001600160a01b03199182161782559751600182018054918d16918a1691909117905595519786018054988b169890971697909717909555915160038401805493518316600160a01b026001600160e01b031990941691909816179190911790955590516004909101805492518516600160401b026001600160801b03199093169190941617179091559251939450909284907f160bcdb242b6b3400162d90511ed5912a4a4f906a00a80e523c1bb10867e428a90610895908c908c908c908c908c906001600160a01b0395861681529390941660208401526001600160401b0391821660408401528116606083015291909116608082015260a00190565b60405180910390a45050505050505050565b60005b818110156108f3576108e18383838181106108d557634e487b7160e01b600052603260045260246000fd5b90506020020135610fc6565b806108eb81611583565b9150506108aa565b505050565b6000546001600160a01b031633146109225760405162461bcd60e51b81526004016104f390611494565b6001600160a01b0381166109695760405162461bcd60e51b815260206004820152600e60248201526d656d70747920737472617465677960901b60448201526064016104f3565b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517f3edff2b723512b7e98f0fb394d84a670f3a40eb2f2c51e9c00c58a3f04e1e4dd9190a250565b6000546001600160a01b031633146109df5760405162461bcd60e51b81526004016104f390611494565b6109e9600061125b565b565b60006109fb610230858585611160565b949350505050565b6000610a0e82610b77565b905060008111610a555760405162461bcd60e51b8152602060048201526012602482015271151bdc155c0818da1958dac819985a5b195960721b60448201526064016104f3565b600082815260026020818152604092839020835160e08101855281546001600160a01b039081168083526001840154821694830185905294830154811682870181905260038401549182166060840152600160a01b9091046001600160401b03908116608084015260049384015480821660a0850152600160401b90041660c08301529451630d32030b60e31b815291820193909352602481019190915260448101849052909190636990185890606401600060405180830381600087803b158015610b2057600080fd5b505af1158015610b34573d6000803e3d6000fd5b50505050827fd9ed57b29272093f04d5d1de3484d5ef3819413dcccbfe2d364ead6ab58d4df683604051610b6a91815260200190565b60405180910390a2505050565b6000818152600260208181526040808420815160e08101835281546001600160a01b03908116808352600184015482169583019590955294820154851692810192909252600381015493841660608301526001600160401b03600160a01b909404841660808301526004015480841660a0830152600160401b900490921660c08301521580610c1357504281608001516001600160401b031611155b80610ca85750606081015181516040808401519051636eb1769f60e11b81526001600160a01b039283166004820152908216602482015291169063dd62ed3e9060440160206040518083038186803b158015610c6e57600080fd5b505afa158015610c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca6919061147c565b155b80610d305750606081015181516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b158015610cf657600080fd5b505afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e919061147c565b155b15610d3e5750600092915050565b6020810151815160405163e8e7e2d160e01b81526001600160a01b03928316600482015290821660248201526000917f0000000000000000000000000000000000000000000000000000000000000000169063e8e7e2d19060440160206040518083038186803b158015610db157600080fd5b505afa158015610dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de9919061145b565b9050600081600b0b1215610ee057602082015182516040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a082319060240160206040518083038186803b158015610e4457600080fd5b505afa158015610e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7c919061147c565b90506000610e8c836000196114c9565b6bffffffffffffffffffffffff1690508360a001516001600160401b031681610eb59190611564565b8211610edd5760c0840151610ed3906001600160401b031682611564565b9695505050505050565b50505b5060009392505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091526109fb61033d858585611160565b6000546001600160a01b03163314610f5b5760405162461bcd60e51b81526004016104f390611494565b6001600160a01b03811660009081526003602052604090205460ff1615610fc3576001600160a01b038116600081815260036020526040808220805460ff19169055517fcccfdaf06e384e4afcea4acf18f915e4cf10ccbebf3bd41dbdbf360388fa61389190a25b50565b600081815260026020818152604092839020835160e08101855281546001600160a01b03908116808352600184015482169483019490945293820154841694810194909452600381015492831660608501526001600160401b03600160a01b909304831660808501526004015480831660a0850152600160401b900490911660c083015233148061106357504281608001516001600160401b0316105b6110a45760405162461bcd60e51b8152602060048201526012602482015271043616e27742064656c65746520546f7055760741b60448201526064016104f3565b60008281526002602081815260409283902080546001600160a01b031990811682556001820180548216905592810180549093169092556003820180546001600160e01b0319169055600490910180546001600160801b031916905582810151835184840151606086015185516001600160a01b039283168152908216948101949094529182169391169185917f435d6aa02bc57be393afe57c6498e59391018bbf9f6be723d2f94a0e0328ae4b910160405180910390a45050565b604080516001600160a01b0380861660208301528085169282019290925290821660608201526000906080016040516020818303038152906040528051906020012090509392505050565b6108f36102ee848484611160565b6108f361021d848484611160565b6000546001600160a01b031633146111f15760405162461bcd60e51b81526004016104f390611494565b6001600160a01b0381166112565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104f3565b610fc3815b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146112c257600080fd5b919050565b80356001600160401b03811681146112c257600080fd5b6000602082840312156112ef578081fd5b6112f8826112ab565b9392505050565b600080600060608486031215611313578182fd5b61131c846112ab565b925061132a602085016112ab565b9150611338604085016112ab565b90509250925092565b60008060008060008060c08789031215611359578182fd5b611362876112ab565b9550611370602088016112ab565b945061137e604088016112ab565b935061138c606088016112c7565b925061139a608088016112c7565b91506113a860a088016112c7565b90509295509295509295565b600080602083850312156113c6578182fd5b82356001600160401b03808211156113dc578384fd5b818501915085601f8301126113ef578384fd5b8135818111156113fd578485fd5b8660208260051b8501011115611411578485fd5b60209290920196919550909350505050565b600060208284031215611434578081fd5b815180151581146112f8578182fd5b600060208284031215611454578081fd5b5035919050565b60006020828403121561146c578081fd5b815180600b0b81146112f8578182fd5b60006020828403121561148d578081fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600081600b0b83600b0b6b7fffffffffffffffffffffff838213848413838304851182821616156114fc576114fc61159e565b6b7fffffffffffffffffffffff19868512828116878305871216156115235761152361159e565b87871292508582058712848416161561153e5761153e61159e565b858505871281841616156115545761155461159e565b5050509290910295945050505050565b600081600019048311821515161561157e5761157e61159e565b500290565b60006000198214156115975761159761159e565b5060010190565b634e487b7160e01b600052601160045260246000fdfea264697066735822122041be6d9cb103ab5e6fd1dc989c4de911370f59285b2cc4665f885671fae8b10e64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80638bc6a941116100b8578063a7052e6b1161007c578063a7052e6b146103ff578063c613aec014610419578063f11665c91461043c578063f2556da91461044f578063f29730cf14610462578063f2fde38b1461047557600080fd5b80638bc6a941146102bc5780638da5cb5b146102cf578063947dd645146102e0578063985d28aa146102f35780639aed5c511461032f57600080fd5b8063715018a6116100ff578063715018a6146101e657806377a80e47146101ee578063854ba6d01461020f57806388882af2146102225780638b80f3511461023557600080fd5b80633aa4e5901461013c5780633db29ed81461015157806347cda691146101955780634e0e623d146101a857806359b830be146101bb575b600080fd5b61014f61014a366004611341565b610488565b005b6101787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b61014f6101a33660046113b4565b6108a7565b61014f6101b63660046112de565b6108f8565b6001546101ce906001600160401b031681565b6040516001600160401b03909116815260200161018c565b61014f6109b5565b6102016101fc3660046112ff565b6109eb565b60405190815260200161018c565b61014f61021d366004611443565b610a03565b610201610230366004611443565b610b77565b6102486102433660046112ff565b610eea565b60405161018c919081516001600160a01b039081168252602080840151821690830152604080840151821690830152606080840151909116908201526080808301516001600160401b039081169183019190915260a08381015182169083015260c092830151169181019190915260e00190565b61014f6102ca3660046112de565b610f31565b6000546001600160a01b0316610178565b61014f6102ee366004611443565b610fc6565b61031f6103013660046112de565b6001600160a01b031660009081526003602052604090205460ff1690565b604051901515815260200161018c565b61024861033d366004611443565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915250600090815260026020818152604092839020835160e08101855281546001600160a01b039081168252600183015481169382019390935292810154821693830193909352600383015490811660608301526001600160401b03600160a01b9091048116608083015260049092015480831660a0830152600160401b900490911660c082015290565b6000546101ce90600160a01b90046001600160401b031681565b61031f6104273660046112de565b60036020526000908152604090205460ff1681565b61020161044a3660046112ff565b611160565b61014f61045d3660046112ff565b6111ab565b61014f6104703660046112ff565b6111b9565b61014f6104833660046112de565b6111c7565b6001600160a01b038616158015906104a857506001600160a01b03851615155b80156104bc57506001600160a01b03841615155b6104fc5760405162461bcd60e51b815260206004820152600c60248201526b4e756c6c204164647265737360a01b60448201526064015b60405180910390fd5b42836001600160401b0316116105435760405162461bcd60e51b815260206004820152600c60248201526b496e76616c69642074696d6560a01b60448201526064016104f3565b6000546001600160401b03600160a01b909104811690831610156105a05760405162461bcd60e51b8152602060048201526014602482015273125b98dc99585cd9481b1bddd95c881b1a5b5a5d60621b60448201526064016104f3565b6001546001600160401b0390811690821610156105f65760405162461bcd60e51b8152602060048201526014602482015273125b98dc99585cd9481d5c1c195c881b1a5b5a5d60621b60448201526064016104f3565b6001600160a01b03851660009081526003602052604090205460ff166106555760405162461bcd60e51b81526020600482015260146024820152731cdd1c985d1959de481b9bdd08185b1b1bddd95960621b60448201526064016104f3565b604051630fc888cb60e41b81526001600160a01b03878116600483015286169063fc888cb09060240160206040518083038186803b15801561069657600080fd5b505afa1580156106aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ce9190611423565b61071a5760405162461bcd60e51b815260206004820152601960248201527f737570657220746f6b656e206e6f7420737570706f727465640000000000000060448201526064016104f3565b6000610727338887611160565b6040805160e081018252338082526001600160a01b038b811660208085018281528d84168688019081528d8516606088019081526001600160401b03808f1660808a019081528e821660a08b019081528e831660c08c0190815260008e81526002988990528d90208c518154908c166001600160a01b03199182161782559751600182018054918d16918a1691909117905595519786018054988b169890971697909717909555915160038401805493518316600160a01b026001600160e01b031990941691909816179190911790955590516004909101805492518516600160401b026001600160801b03199093169190941617179091559251939450909284907f160bcdb242b6b3400162d90511ed5912a4a4f906a00a80e523c1bb10867e428a90610895908c908c908c908c908c906001600160a01b0395861681529390941660208401526001600160401b0391821660408401528116606083015291909116608082015260a00190565b60405180910390a45050505050505050565b60005b818110156108f3576108e18383838181106108d557634e487b7160e01b600052603260045260246000fd5b90506020020135610fc6565b806108eb81611583565b9150506108aa565b505050565b6000546001600160a01b031633146109225760405162461bcd60e51b81526004016104f390611494565b6001600160a01b0381166109695760405162461bcd60e51b815260206004820152600e60248201526d656d70747920737472617465677960901b60448201526064016104f3565b6001600160a01b038116600081815260036020526040808220805460ff19166001179055517f3edff2b723512b7e98f0fb394d84a670f3a40eb2f2c51e9c00c58a3f04e1e4dd9190a250565b6000546001600160a01b031633146109df5760405162461bcd60e51b81526004016104f390611494565b6109e9600061125b565b565b60006109fb610230858585611160565b949350505050565b6000610a0e82610b77565b905060008111610a555760405162461bcd60e51b8152602060048201526012602482015271151bdc155c0818da1958dac819985a5b195960721b60448201526064016104f3565b600082815260026020818152604092839020835160e08101855281546001600160a01b039081168083526001840154821694830185905294830154811682870181905260038401549182166060840152600160a01b9091046001600160401b03908116608084015260049384015480821660a0850152600160401b90041660c08301529451630d32030b60e31b815291820193909352602481019190915260448101849052909190636990185890606401600060405180830381600087803b158015610b2057600080fd5b505af1158015610b34573d6000803e3d6000fd5b50505050827fd9ed57b29272093f04d5d1de3484d5ef3819413dcccbfe2d364ead6ab58d4df683604051610b6a91815260200190565b60405180910390a2505050565b6000818152600260208181526040808420815160e08101835281546001600160a01b03908116808352600184015482169583019590955294820154851692810192909252600381015493841660608301526001600160401b03600160a01b909404841660808301526004015480841660a0830152600160401b900490921660c08301521580610c1357504281608001516001600160401b031611155b80610ca85750606081015181516040808401519051636eb1769f60e11b81526001600160a01b039283166004820152908216602482015291169063dd62ed3e9060440160206040518083038186803b158015610c6e57600080fd5b505afa158015610c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ca6919061147c565b155b80610d305750606081015181516040516370a0823160e01b81526001600160a01b0391821660048201529116906370a082319060240160206040518083038186803b158015610cf657600080fd5b505afa158015610d0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2e919061147c565b155b15610d3e5750600092915050565b6020810151815160405163e8e7e2d160e01b81526001600160a01b03928316600482015290821660248201526000917f0000000000000000000000000000000000000000000000000000000000000000169063e8e7e2d19060440160206040518083038186803b158015610db157600080fd5b505afa158015610dc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de9919061145b565b9050600081600b0b1215610ee057602082015182516040516370a0823160e01b81526001600160a01b03918216600482015260009291909116906370a082319060240160206040518083038186803b158015610e4457600080fd5b505afa158015610e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7c919061147c565b90506000610e8c836000196114c9565b6bffffffffffffffffffffffff1690508360a001516001600160401b031681610eb59190611564565b8211610edd5760c0840151610ed3906001600160401b031682611564565b9695505050505050565b50505b5060009392505050565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c08101919091526109fb61033d858585611160565b6000546001600160a01b03163314610f5b5760405162461bcd60e51b81526004016104f390611494565b6001600160a01b03811660009081526003602052604090205460ff1615610fc3576001600160a01b038116600081815260036020526040808220805460ff19169055517fcccfdaf06e384e4afcea4acf18f915e4cf10ccbebf3bd41dbdbf360388fa61389190a25b50565b600081815260026020818152604092839020835160e08101855281546001600160a01b03908116808352600184015482169483019490945293820154841694810194909452600381015492831660608501526001600160401b03600160a01b909304831660808501526004015480831660a0850152600160401b900490911660c083015233148061106357504281608001516001600160401b0316105b6110a45760405162461bcd60e51b8152602060048201526012602482015271043616e27742064656c65746520546f7055760741b60448201526064016104f3565b60008281526002602081815260409283902080546001600160a01b031990811682556001820180548216905592810180549093169092556003820180546001600160e01b0319169055600490910180546001600160801b031916905582810151835184840151606086015185516001600160a01b039283168152908216948101949094529182169391169185917f435d6aa02bc57be393afe57c6498e59391018bbf9f6be723d2f94a0e0328ae4b910160405180910390a45050565b604080516001600160a01b0380861660208301528085169282019290925290821660608201526000906080016040516020818303038152906040528051906020012090509392505050565b6108f36102ee848484611160565b6108f361021d848484611160565b6000546001600160a01b031633146111f15760405162461bcd60e51b81526004016104f390611494565b6001600160a01b0381166112565760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104f3565b610fc3815b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80356001600160a01b03811681146112c257600080fd5b919050565b80356001600160401b03811681146112c257600080fd5b6000602082840312156112ef578081fd5b6112f8826112ab565b9392505050565b600080600060608486031215611313578182fd5b61131c846112ab565b925061132a602085016112ab565b9150611338604085016112ab565b90509250925092565b60008060008060008060c08789031215611359578182fd5b611362876112ab565b9550611370602088016112ab565b945061137e604088016112ab565b935061138c606088016112c7565b925061139a608088016112c7565b91506113a860a088016112c7565b90509295509295509295565b600080602083850312156113c6578182fd5b82356001600160401b03808211156113dc578384fd5b818501915085601f8301126113ef578384fd5b8135818111156113fd578485fd5b8660208260051b8501011115611411578485fd5b60209290920196919550909350505050565b600060208284031215611434578081fd5b815180151581146112f8578182fd5b600060208284031215611454578081fd5b5035919050565b60006020828403121561146c578081fd5b815180600b0b81146112f8578182fd5b60006020828403121561148d578081fd5b5051919050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600081600b0b83600b0b6b7fffffffffffffffffffffff838213848413838304851182821616156114fc576114fc61159e565b6b7fffffffffffffffffffffff19868512828116878305871216156115235761152361159e565b87871292508582058712848416161561153e5761153e61159e565b858505871281841616156115545761155461159e565b5050509290910295945050505050565b600081600019048311821515161561157e5761157e61159e565b500290565b60006000198214156115975761159761159e565b5060010190565b634e487b7160e01b600052601160045260246000fdfea264697066735822122041be6d9cb103ab5e6fd1dc989c4de911370f59285b2cc4665f885671fae8b10e64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/StrollManager.sol:StrollManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3420,
        "contract": "contracts/StrollManager.sol:StrollManager",
        "label": "minLower",
        "offset": 20,
        "slot": "0",
        "type": "t_uint64"
      },
      {
        "astId": 3422,
        "contract": "contracts/StrollManager.sol:StrollManager",
        "label": "minUpper",
        "offset": 0,
        "slot": "1",
        "type": "t_uint64"
      },
      {
        "astId": 3427,
        "contract": "contracts/StrollManager.sol:StrollManager",
        "label": "topUps",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_struct(TopUp)3418_storage)"
      },
      {
        "astId": 3431,
        "contract": "contracts/StrollManager.sol:StrollManager",
        "label": "approvedStrategies",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IStrategy)4077": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_contract(ISuperToken)2443": {
        "encoding": "inplace",
        "label": "contract ISuperToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(TopUp)3418_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct StrollManager.TopUp)",
        "numberOfBytes": "32",
        "value": "t_struct(TopUp)3418_storage"
      },
      "t_struct(TopUp)3418_storage": {
        "encoding": "inplace",
        "label": "struct StrollManager.TopUp",
        "members": [
          {
            "astId": 3403,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3406,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "superToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(ISuperToken)2443"
          },
          {
            "astId": 3409,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "strategy",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IStrategy)4077"
          },
          {
            "astId": 3411,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "liquidityToken",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 3413,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "expiry",
            "offset": 20,
            "slot": "3",
            "type": "t_uint64"
          },
          {
            "astId": 3415,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "lowerLimit",
            "offset": 0,
            "slot": "4",
            "type": "t_uint64"
          },
          {
            "astId": 3417,
            "contract": "contracts/StrollManager.sol:StrollManager",
            "label": "upperLimit",
            "offset": 8,
            "slot": "4",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}